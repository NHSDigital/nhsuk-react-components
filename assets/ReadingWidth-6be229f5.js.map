{"version":3,"file":"ReadingWidth-6be229f5.js","sources":["../../src/components/icons/Icons.tsx","../../src/components/action-link/ActionLink.tsx","../../src/components/back-link/BackLink.tsx","../../src/components/breadcrumb/Breadcrumb.tsx","../../src/components/button/Button.tsx","../../src/components/card/CardContext.ts","../../src/components/card/components/CardContent.tsx","../../src/components/card/components/CardDescription.tsx","../../src/components/card/components/CardImage.tsx","../../src/components/card/components/CardLink.tsx","../../src/components/card/components/CardHeading.tsx","../../src/components/card/components/CardGroup.tsx","../../src/components/card/components/CardGroupItem.tsx","../../src/components/card/Card.tsx","../../src/components/care-card/CareCard.tsx","../../src/components/hint/Hint.tsx","../../src/components/error-message/ErrorMessage.tsx","../../src/util/RandomID.ts","../../src/components/label/Label.tsx","../../src/components/fieldset/FieldsetContext.ts","../../src/components/form/FormContext.ts","../../src/components/form/Form.tsx","../../src/util/FormGroup.tsx","../../src/components/checkboxes/CheckboxContext.ts","../../src/components/checkboxes/components/Box.tsx","../../src/components/checkboxes/Checkboxes.tsx","../../src/components/contents-list/ContentsList.tsx","../../src/components/date-input/DateInputContext.ts","../../src/components/date-input/components/IndividualDateInputs.tsx","../../src/components/date-input/DateInput.tsx","../../src/components/details/Details.tsx","../../src/components/do-dont-list/DoDontList.tsx","../../src/components/error-summary/ErrorSummary.tsx","../../src/components/fieldset/Fieldset.tsx","../../src/components/footer/Footer.tsx","../../src/components/header/HeaderContext.ts","../../src/components/header/components/NHSLogo.tsx","../../src/components/header/components/OrganisationalLogo.tsx","../../src/components/header/components/Search.tsx","../../src/components/header/components/Nav.tsx","../../src/components/header/components/NavItem.tsx","../../src/components/header/components/NavItemList.tsx","../../src/components/header/components/NavMenuClose.tsx","../../src/components/header/components/Content.tsx","../../src/components/header/components/MenuToggle.tsx","../../src/components/header/components/TransactionalServiceName.tsx","../../src/components/header/components/NavTitle.tsx","../../src/components/header/components/NavContainer.tsx","../../src/components/header/Header.tsx","../../src/components/hero/Hero.tsx","../../src/components/images/Images.tsx","../../src/components/input/Input.tsx","../../src/components/inset-text/InsetText.tsx","../../src/components/list-panel/ListPanel.tsx","../../src/components/nav-a-z/NavAZ.tsx","../../src/components/pagination/Pagination.tsx","../../src/components/radios/RadioContext.ts","../../src/components/radios/components/Divider.tsx","../../src/components/radios/components/Radio.tsx","../../src/components/radios/Radios.tsx","../../src/components/review-date/ReviewDate.tsx","../../src/components/select/Select.tsx","../../src/components/skip-link/SkipLink.tsx","../../src/components/summary-list/SummaryList.tsx","../../src/components/table/TableSectionContext.ts","../../src/components/table/components/TableBody.tsx","../../src/components/table/components/TableCaption.tsx","../../src/components/table/components/TableCell.tsx","../../src/components/table/components/TableContainer.tsx","../../src/components/table/components/TableHead.tsx","../../src/components/table/TableContext.ts","../../src/components/table/TableHelpers.ts","../../src/components/table/components/TableRow.tsx","../../src/components/table/components/TablePanel.tsx","../../src/components/table/Table.tsx","../../src/components/tag/Tag.tsx","../../src/components/textarea/Textarea.tsx","../../src/components/typography/LedeText.tsx","../../src/components/typography/BodyText.tsx","../../src/components/warning-callout/WarningCallout.tsx","../../src/components/utils/Clearfix.tsx","../../src/components/utils/ReadingWidth.tsx"],"sourcesContent":["import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\ninterface BaseIconSVGProps extends HTMLProps<SVGSVGElement> {\n  iconType?: string;\n  crossOrigin?: '' | 'anonymous' | 'use-credentials';\n}\n\nexport const BaseIconSVG: React.FC<BaseIconSVGProps> = ({\n  className,\n  children,\n  height,\n  width,\n  iconType,\n  ...rest\n}) => (\n  <svg\n    className={classNames('nhsuk-icon', iconType, className)}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    aria-hidden=\"true\"\n    height={height}\n    width={width}\n    {...rest}\n  >\n    {children}\n  </svg>\n);\n\nBaseIconSVG.defaultProps = {\n  height: 32,\n  width: 32,\n};\n\nexport const ArrowLeft: React.FC<BaseIconSVGProps> = (props) => (\n  <BaseIconSVG iconType=\"nhsuk-icon__arrow-left\" {...props}>\n    <path d=\"M4.1 12.3l2.7 3c.2.2.5.2.7 0 .1-.1.1-.2.1-.3v-2h11c.6 0 1-.4 1-1s-.4-1-1-1h-11V9c0-.2-.1-.4-.3-.5h-.2c-.1 0-.3.1-.4.2l-2.7 3c0 .2 0 .4.1.6z\" />\n  </BaseIconSVG>\n);\n\nexport const ArrowRight: React.FC<BaseIconSVGProps> = (props) => (\n  <BaseIconSVG iconType=\"nhsuk-icon__arrow-right\" {...props}>\n    <path d=\"M19.6 11.66l-2.73-3A.51.51 0 0 0 16 9v2H5a1 1 0 0 0 0 2h11v2a.5.5 0 0 0 .32.46.39.39 0 0 0 .18 0 .52.52 0 0 0 .37-.16l2.73-3a.5.5 0 0 0 0-.64z\" />\n  </BaseIconSVG>\n);\n\nexport const ArrowRightCircle: React.FC<BaseIconSVGProps> = (props) => (\n  <BaseIconSVG iconType=\"nhsuk-icon__arrow-right-circle\" {...props}>\n    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    <path d=\"M12 2a10 10 0 0 0-9.95 9h11.64L9.74 7.05a1 1 0 0 1 1.41-1.41l5.66 5.65a1 1 0 0 1 0 1.42l-5.66 5.65a1 1 0 0 1-1.41 0 1 1 0 0 1 0-1.41L13.69 13H2.05A10 10 0 1 0 12 2z\" />\n  </BaseIconSVG>\n);\n\nexport const ChevronLeft: React.FC<BaseIconSVGProps> = (props) => (\n  <BaseIconSVG iconType=\"nhsuk-icon__chevron-left\" {...props}>\n    <path d=\"M8.5 12c0-.3.1-.5.3-.7l5-5c.4-.4 1-.4 1.4 0s.4 1 0 1.4L10.9 12l4.3 4.3c.4.4.4 1 0 1.4s-1 .4-1.4 0l-5-5c-.2-.2-.3-.4-.3-.7z\" />\n  </BaseIconSVG>\n);\n\nexport const ChevronRight: React.FC<BaseIconSVGProps> = (props) => (\n  <BaseIconSVG iconType=\"nhsuk-icon__chevron-right\" {...props}>\n    <path d=\"M15.5 12a1 1 0 0 1-.29.71l-5 5a1 1 0 0 1-1.42-1.42l4.3-4.29-4.3-4.29a1 1 0 0 1 1.42-1.42l5 5a1 1 0 0 1 .29.71z\" />\n  </BaseIconSVG>\n);\n\nexport const Close: React.FC<BaseIconSVGProps> = (props) => (\n  <BaseIconSVG iconType=\"nhsuk-icon__close\" {...props}>\n    <path d=\"M13.41 12l5.3-5.29a1 1 0 1 0-1.42-1.42L12 10.59l-5.29-5.3a1 1 0 0 0-1.42 1.42l5.3 5.29-5.3 5.29a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0l5.29-5.3 5.29 5.3a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42z\" />\n  </BaseIconSVG>\n);\n\nexport const Cross: React.FC<BaseIconSVGProps> = (props) => (\n  <BaseIconSVG iconType=\"nhsuk-icon__cross\" {...props}>\n    <path d=\"M17 18.5c-.4 0-.8-.1-1.1-.4l-10-10c-.6-.6-.6-1.6 0-2.1.6-.6 1.5-.6 2.1 0l10 10c.6.6.6 1.5 0 2.1-.3.3-.6.4-1 .4z\" />\n    <path d=\"M7 18.5c-.4 0-.8-.1-1.1-.4-.6-.6-.6-1.5 0-2.1l10-10c.6-.6 1.5-.6 2.1 0 .6.6.6 1.5 0 2.1l-10 10c-.3.3-.6.4-1 .4z\" />\n  </BaseIconSVG>\n);\n\nexport const SmallEmdash: React.FC<BaseIconSVGProps> = ({ height, width, ...rest }) => (\n  <BaseIconSVG iconType=\"nhsuk-icon__emdash\" height={height || 1} width={width || 16} {...rest}>\n    <path d=\"M0 0h16v1H0z\" />\n  </BaseIconSVG>\n);\n\nexport const Emdash: React.FC<BaseIconSVGProps> = ({ height, width, ...rest }) => (\n  <BaseIconSVG iconType=\"nhsuk-icon__emdash\" height={height || 1} width={width || 19} {...rest}>\n    <path d=\"M0 0h19v1H0z\" />\n  </BaseIconSVG>\n);\n\nexport const Minus: React.FC<BaseIconSVGProps> = (props) => (\n  <BaseIconSVG iconType=\"nhsuk-icon__minus\" {...props}>\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\n    <path\n      fill=\"none\"\n      stroke=\"#fff\"\n      strokeLinecap=\"round\"\n      strokeMiterlimit=\"10\"\n      strokeWidth=\"2\"\n      d=\"M8 12h8\"\n    />\n  </BaseIconSVG>\n);\n\nexport const Plus: React.FC<BaseIconSVGProps> = (props) => (\n  <BaseIconSVG iconType=\"nhsuk-icon__minus\" {...props}>\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\n    <path\n      fill=\"none\"\n      stroke=\"#fff\"\n      strokeLinecap=\"round\"\n      strokeMiterlimit=\"10\"\n      strokeWidth=\"2\"\n      d=\"M12 8v8M8 12h8\"\n    />\n  </BaseIconSVG>\n);\n\nexport const Search: React.FC<BaseIconSVGProps> = (props) => (\n  <BaseIconSVG iconType=\"nhsuk-icon__search\" {...props}>\n    <path d=\"M19.71 18.29l-4.11-4.1a7 7 0 1 0-1.41 1.41l4.1 4.11a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42zM5 10a5 5 0 1 1 5 5 5 5 0 0 1-5-5z\" />\n  </BaseIconSVG>\n);\n\nexport const Tick: React.FC<BaseIconSVGProps> = (props) => (\n  <BaseIconSVG iconType=\"nhsuk-icon__tick\" {...props}>\n    <path\n      strokeWidth=\"4\"\n      strokeLinecap=\"round\"\n      stroke=\"#007f3b\"\n      fill=\"none\"\n      d=\"M18.4 7.8l-8.5 8.4L5.6 12\"\n    />\n  </BaseIconSVG>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { ArrowRightCircle } from '../icons';\nimport type { AsElementLink } from '../../util/types/LinkTypes';\n\nconst ActionLink: React.FC<AsElementLink<HTMLAnchorElement>> = ({\n  children,\n  asElement: Component = 'a',\n  className,\n  ...rest\n}) => (\n  <div className=\"nhsuk-action-link\">\n    <Component className={classNames('nhsuk-action-link__link', className)} {...rest}>\n      <ArrowRightCircle />\n      <span className=\"nhsuk-action-link__text\">{children}</span>\n    </Component>\n  </div>\n);\n\nexport default ActionLink;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { ChevronLeft } from '../icons';\nimport type { AsElementLink } from '../../util/types/LinkTypes';\n\nconst BackLink: React.FC<AsElementLink<HTMLAnchorElement>> = ({\n  children,\n  className,\n  asElement: Component = 'a',\n  ...rest\n}) => (\n  <div className=\"nhsuk-back-link\">\n    <Component className={classNames('nhsuk-back-link__link', className)} {...rest}>\n      <ChevronLeft />\n      {children}\n    </Component>\n  </div>\n);\n\nexport default BackLink;\n","import React, { HTMLProps, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport { Container } from '../layout';\nimport type { AsElementLink } from '../../util/types/LinkTypes';\n\ntype Item = React.FC<AsElementLink<HTMLAnchorElement>>;\n\nconst Item: Item = ({\n  className, children, asElement: Component = 'a', ...rest\n}) => (\n  <li className=\"nhsuk-breadcrumb__item\">\n    <Component className={classNames('nhsuk-breadcrumb__link', className)} {...rest}>\n      {children}\n    </Component>\n  </li>\n);\n\nconst Back: Item = ({ className, asElement: Component = 'a', ...rest }) => (\n  <p className={classNames('nhsuk-breadcrumb__back', className)}>\n    <Component className=\"nhsuk-breadcrumb__backlink\" {...rest} />\n  </p>\n);\n\ninterface Breadcrumb extends React.FC<HTMLProps<HTMLDivElement>> {\n  Item: Item;\n  Back: Item;\n}\n\ntype SplitChildren = {\n  ItemChildren: Array<ReactNode>;\n  OtherChildren: Array<ReactNode>;\n};\n\nconst Breadcrumb: Breadcrumb = ({ className, children, ...rest }) => {\n  // Split off any \"Item\" components\n  const { ItemChildren, OtherChildren } = React.Children.toArray(children).reduce<SplitChildren>(\n    (prev, child) => {\n      if (child && typeof child === 'object' && 'type' in child && child.type === Item) {\n        prev.ItemChildren.push(child);\n      } else {\n        prev.OtherChildren.push(child);\n      }\n      return prev;\n    },\n    {\n      ItemChildren: [],\n      OtherChildren: [],\n    },\n  );\n\n  return (\n    <nav className={classNames('nhsuk-breadcrumb', className)} {...rest}>\n      <Container>\n        <ol className=\"nhsuk-breadcrumb__list\">{ItemChildren}</ol>\n        {OtherChildren}\n      </Container>\n    </nav>\n  );\n};\n\nBreadcrumb.Item = Item;\nBreadcrumb.Back = Back;\n\nBreadcrumb.defaultProps = {\n  'aria-label': 'Breadcrumb',\n};\n\nexport default Breadcrumb;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\ninterface ButtonProps extends HTMLProps<HTMLButtonElement> {\n  type?: 'button' | 'submit' | 'reset';\n  disabled?: boolean;\n  secondary?: boolean;\n  reverse?: boolean;\n  as?: 'button';\n}\n\ninterface ButtonLinkProps extends HTMLProps<HTMLAnchorElement> {\n  disabled?: boolean;\n  secondary?: boolean;\n  reverse?: boolean;\n  as?: 'a';\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  className,\n  disabled,\n  secondary,\n  reverse,\n  ...rest\n}) => (\n  // eslint-disable-next-line react/button-has-type\n  <button\n    className={classNames(\n      'nhsuk-button',\n      { 'nhsuk-button--disabled': disabled },\n      { 'nhsuk-button--secondary': secondary },\n      { 'nhsuk-button--reverse': reverse },\n      className,\n    )}\n    disabled={disabled}\n    aria-disabled={disabled ? 'true' : 'false'}\n    {...rest}\n  />\n);\n\nButton.defaultProps = {\n  type: 'submit',\n};\n\nexport const ButtonLink: React.FC<ButtonLinkProps> = ({\n  className,\n  role,\n  draggable,\n  children,\n  disabled,\n  secondary,\n  reverse,\n  ...rest\n}) => (\n  <a\n    className={classNames(\n      'nhsuk-button',\n      { 'nhsuk-button--disabled': disabled },\n      { 'nhsuk-button--secondary': secondary },\n      { 'nhsuk-button--reverse': reverse },\n      className,\n    )}\n    role={role}\n    aria-disabled={disabled ? 'true' : 'false'}\n    draggable={draggable}\n    {...rest}\n  >\n    {children}\n  </a>\n);\n\nButtonLink.defaultProps = {\n  role: 'button',\n  draggable: false,\n};\n\nconst ButtonWrapper: React.FC<ButtonLinkProps | ButtonProps> = ({ href, as, ...rest }) => {\n  if (as === 'a') {\n    return <ButtonLink href={href} {...(rest as ButtonLinkProps)} />;\n  }\n  if (as === 'button') {\n    return <Button {...(rest as ButtonProps)} />;\n  }\n  if (href) {\n    return <ButtonLink href={href} {...(rest as ButtonLinkProps)} />;\n  }\n  return <Button {...(rest as ButtonProps)} />;\n};\n\nexport default ButtonWrapper;\n","import React from 'react';\n\nexport interface ICardContext {\n  feature: boolean;\n}\n\nconst CardContext = React.createContext<ICardContext>({\n  feature: false,\n});\n\nexport default CardContext;\n","import React, { HTMLProps, useContext } from 'react';\nimport classNames from 'classnames';\nimport CardContext from '../CardContext';\n\nconst CardContent: React.FC<HTMLProps<HTMLDivElement>> = ({ className, ...rest }) => {\n  const { feature } = useContext(CardContext);\n  return (\n    <div\n      className={classNames(\n        'nhsuk-card__content',\n        { 'nhsuk-card__content--feature': feature },\n        className,\n      )}\n      {...rest}\n    />\n  );\n};\n\nexport default CardContent;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nconst CardDescription: React.FC<HTMLProps<HTMLParagraphElement>> = ({ className, ...rest }) => (\n  <p className={classNames('nhsuk-card__description', className)} {...rest} />\n);\n\nexport default CardDescription;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\ninterface CardImageProps extends HTMLProps<HTMLImageElement> {\n  // Overriding the default crossOrigin the default is crossOrigin: string | undefined\n  // which causes a typescript \"incompatible types\" error.\n  crossOrigin?: 'anonymous' | 'use-credentials' | undefined;\n}\n\nconst CardImage: React.FC<CardImageProps> = ({ className, alt, ...rest }) => (\n  <img className={classNames('nhsuk-card__img', className)} alt={alt} {...rest} />\n);\n\nexport default CardImage;\n","import React from 'react';\nimport classNames from 'classnames';\nimport type { AsElementLink } from '../../../util/types/LinkTypes';\n\nconst CardLink: React.FC<AsElementLink<HTMLAnchorElement>> = ({\n  className,\n  asElement: Component = 'a',\n  ...rest\n}) => (\n  <Component className={classNames('nhsuk-card__link', className)} {...rest} />\n);\n\nexport default CardLink;\n","import React, { HTMLProps, useContext } from 'react';\nimport classNames from 'classnames';\nimport HeadingLevel, { HeadingLevelType } from '../../../util/HeadingLevel';\nimport CardContext from '../CardContext';\n\ninterface CardHeadingProps extends HTMLProps<HTMLHeadingElement> {\n  headingLevel?: HeadingLevelType;\n}\n\nconst CardHeading: React.FC<CardHeadingProps> = ({ className, ...rest }) => {\n  const { feature } = useContext(CardContext);\n  return (\n    <HeadingLevel\n      className={classNames(\n        'nhsuk-card__heading',\n        { 'nhsuk-card__heading--feature': feature },\n        className,\n      )}\n      {...rest}\n    />\n  );\n};\n\nCardHeading.defaultProps = {\n  headingLevel: 'h2',\n};\n\nexport default CardHeading;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\nimport { Row } from '../../layout';\n\nconst CardGroup: React.FC<HTMLProps<HTMLDivElement>> = ({ className, ...rest }) => (\n  <Row className={classNames('nhsuk-card-group', className)} {...rest} />\n);\n\nexport default CardGroup;\n","import React, { ComponentProps } from 'react';\nimport classNames from 'classnames';\nimport { Col } from '../../layout';\n\nconst CardGroupItem: React.FC<ComponentProps<typeof Col>> = ({ className, ...rest }) => (\n  <Col className={classNames('nhsuk-card-group__item', className)} {...rest} />\n);\n\nexport default CardGroupItem;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\nimport CardContext from './CardContext';\nimport CardContent from './components/CardContent';\nimport CardDescription from './components/CardDescription';\nimport CardImage from './components/CardImage';\nimport CardLink from './components/CardLink';\nimport CardHeading from './components/CardHeading';\nimport CardGroup from './components/CardGroup';\nimport CardGroupItem from './components/CardGroupItem';\n\ninterface CardProps extends HTMLProps<HTMLDivElement> {\n  clickable?: boolean;\n  feature?: boolean;\n}\n\ninterface ICard extends React.FC<CardProps> {\n  Content: typeof CardContent;\n  Description: typeof CardDescription;\n  Image: typeof CardImage;\n  Link: typeof CardLink;\n  Heading: typeof CardHeading;\n  Group: typeof CardGroup;\n  GroupItem: typeof CardGroupItem;\n}\n\nconst Card: ICard = ({\n  className, clickable, children, feature, ...rest\n}) => (\n  <div\n    className={classNames(\n      'nhsuk-card',\n      { 'nhsuk-card--clickable': clickable },\n      { 'nhsuk-card--feature': feature },\n      className,\n    )}\n    {...rest}\n  >\n    <CardContext.Provider value={{ feature: Boolean(feature) }}>{children}</CardContext.Provider>\n  </div>\n);\n\nCard.defaultProps = {\n  feature: false,\n};\n\nCard.Heading = CardHeading;\nCard.Description = CardDescription;\nCard.Image = CardImage;\nCard.Link = CardLink;\nCard.Content = CardContent;\nCard.Group = CardGroup;\nCard.GroupItem = CardGroupItem;\n\nexport default Card;\n","import React, { HTMLProps, createContext, useContext } from 'react';\nimport classNames from 'classnames';\nimport { CareCardType } from '../../util/types/NHSUKTypes';\nimport HeadingLevel, { HeadingLevelType } from '../../util/HeadingLevel';\n\ninterface CareCardProps extends HTMLProps<HTMLDivElement> {\n  type: CareCardType;\n}\n\nconst CareCardContext = createContext<CareCardType>('non-urgent');\n\nconst genHiddenText = (cardType: CareCardType): string => {\n  switch (cardType) {\n    case 'non-urgent':\n      return 'Non-urgent advice: ';\n    case 'urgent':\n      return 'Urgent advice: ';\n    case 'immediate':\n      return 'Immediate action required: ';\n    default:\n      return '';\n  }\n};\n\nconst CareCardContent: React.FC<HTMLProps<HTMLDivElement>> = ({ className, ...rest }) => (\n  <div className={classNames('nhsuk-care-card__content', className)} {...rest} />\n);\n\ninterface CareCardHeadingProps extends HTMLProps<HTMLHeadingElement> {\n  visuallyHiddenText?: false | string;\n  headingLevel?: HeadingLevelType;\n}\n\nconst CareCardHeading: React.FC<CareCardHeadingProps> = ({\n  className,\n  children,\n  visuallyHiddenText,\n  headingLevel,\n  role,\n  ...rest\n}) => {\n  const cardType = useContext(CareCardContext);\n  return (\n    <div className=\"nhsuk-care-card__heading-container\">\n      <HeadingLevel\n        className={classNames('nhsuk-care-card__heading', className)}\n        headingLevel={headingLevel}\n        {...rest}\n      >\n        <span role={role}>\n          {visuallyHiddenText !== false ? (\n            <span className=\"nhsuk-u-visually-hidden\">\n              {visuallyHiddenText || genHiddenText(cardType)}\n            </span>\n          ) : null}\n          {children}\n        </span>\n      </HeadingLevel>\n      <span className=\"nhsuk-care-card__arrow\" aria-hidden=\"true\" />\n    </div>\n  );\n};\n\nCareCardHeading.defaultProps = {\n  role: 'text',\n};\n\ninterface CareCard extends React.FC<CareCardProps> {\n  Content: React.FC<HTMLProps<HTMLDivElement>>;\n  Heading: React.FC<CareCardHeadingProps>;\n}\n\nconst CareCard: CareCard = ({\n  className, type, children, ...rest\n}) => (\n  <div className={classNames('nhsuk-care-card', `nhsuk-care-card--${type}`, className)} {...rest}>\n    <CareCardContext.Provider value={type}>{children}</CareCardContext.Provider>\n  </div>\n);\n\nCareCard.Content = CareCardContent;\nCareCard.Heading = CareCardHeading;\n\nexport default CareCard;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nexport type HintProps = HTMLProps<HTMLDivElement>;\n\nconst Hint: React.FC<HintProps> = ({ className, ...rest }) => (\n  <div className={classNames('nhsuk-hint', className)} {...rest} />\n);\n\nexport default Hint;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nexport interface ErrorMessageProps extends HTMLProps<HTMLSpanElement> {\n  visuallyHiddenText?: false | string;\n}\n\nconst ErrorMessage: React.FC<ErrorMessageProps> = ({\n  className,\n  visuallyHiddenText,\n  children,\n  ...rest\n}) => (\n  <span className={classNames('nhsuk-error-message', className)} {...rest}>\n    {visuallyHiddenText !== false ? (\n      <span className=\"nhsuk-u-visually-hidden\">{visuallyHiddenText}</span>\n    ) : null}\n    {children}\n  </span>\n);\n\nErrorMessage.defaultProps = {\n  visuallyHiddenText: 'Error: ',\n  role: 'alert',\n};\n\nexport default ErrorMessage;\n","export const getRandomString = (length = 5): string => {\n  const randomNumber = Math.random() + 1;\n  return randomNumber.toString(36).substring(2, length + 2);\n};\n\nexport const generateRandomName = (prefix?: string): string => {\n  const randomString = getRandomString();\n  return prefix ? `${prefix}_${randomString}` : randomString;\n};\n\nexport const generateRandomID = generateRandomName;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\nimport { NHSUKSize } from '../../util/types/NHSUKTypes';\n\nexport interface LabelProps extends Omit<HTMLProps<HTMLLabelElement>, 'size'> {\n  bold?: boolean;\n  isPageHeading?: boolean;\n  size?: NHSUKSize;\n}\n\nconst BaseLabel: React.FC<LabelProps> = ({\n  className, bold, size, isPageHeading, ...rest\n}) => (\n  // eslint-disable-next-line jsx-a11y/label-has-associated-control\n  <label\n    className={classNames(\n      'nhsuk-label',\n      { 'nhsuk-label--s': bold && !size },\n      { 'nhsuk-label--xl': isPageHeading && !size },\n      { [`nhsuk-label--${size}`]: size },\n      className,\n    )}\n    {...rest}\n  />\n);\n\nconst Label: React.FC<LabelProps> = ({ isPageHeading, ...rest }) => {\n  if (isPageHeading) {\n    return (\n      <h1 className=\"nhsuk-label-wrapper\">\n        <BaseLabel isPageHeading {...rest} />\n      </h1>\n    );\n  }\n  return <BaseLabel {...rest} />;\n};\n\nexport default Label;\n","import { createContext } from 'react';\n\nexport type IFieldsetContext = {\n  isFieldset: boolean;\n  passError: (componentId: string, error: boolean) => void;\n  registerComponent: (componentId: string, deregister?: boolean) => void;\n};\n\nconst FieldsetContext = createContext<IFieldsetContext>({\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  isFieldset: false,\n  passError: () => {},\n  registerComponent: () => {},\n});\n\nexport default FieldsetContext;\n","import { createContext, useContext } from 'react';\n\nexport interface IFormContext {\n  disableErrorFromComponents: boolean;\n}\n\nconst FormContext = createContext<IFormContext>({\n  disableErrorFromComponents: false,\n});\n\nexport const useFormContext = (): IFormContext => useContext<IFormContext>(FormContext);\n\nexport default FormContext;\n","import React, { HTMLProps } from 'react';\nimport FormContext from './FormContext';\n\ntype FormProps = HTMLProps<HTMLFormElement> & {\n  disableErrorFromComponents?: boolean;\n};\n\nconst Form: React.FC<FormProps> = ({ disableErrorFromComponents, ...rest }) => (\n  <FormContext.Provider value={{ disableErrorFromComponents: Boolean(disableErrorFromComponents) }}>\n    <form {...rest} />\n  </FormContext.Provider>\n);\n\nexport default Form;\n","import React, { ReactNode, useState, useEffect, HTMLProps, useContext } from 'react';\nimport classNames from 'classnames';\nimport Hint from '../components/hint/Hint';\nimport ErrorMessage from '../components/error-message/ErrorMessage';\nimport { generateRandomID } from './RandomID';\nimport Label from '../components/label/Label';\nimport { FormElementProps } from './types/FormTypes';\nimport FieldsetContext, { IFieldsetContext } from '../components/fieldset/FieldsetContext';\nimport { useFormContext } from '../components/form';\n\ntype ExcludedProps =\n  | 'hint'\n  | 'label'\n  | 'labelProps'\n  | 'hintProps'\n  | 'errorProps'\n  | 'inputType'\n  | 'disableErrorLine';\n\ntype BaseFormElementRenderProps = HTMLProps<\nHTMLInputElement | HTMLDivElement | HTMLSelectElement | HTMLTextAreaElement\n> & {\n  error?: string | boolean;\n};\n\ntype FormElementRenderProps<T> = Omit<T, ExcludedProps> & {\n  id: string;\n  name: string;\n};\n\ntype FormGroupProps<T> = FormElementProps & {\n  children: (props: FormElementRenderProps<T>) => ReactNode;\n  inputType: 'input' | 'radios' | 'select' | 'checkboxes' | 'dateinput' | 'textarea';\n};\n\nconst FormGroup = <T extends BaseFormElementRenderProps>(props: FormGroupProps<T>): JSX.Element => {\n  const {\n    children,\n    hint,\n    label,\n    id,\n    labelProps,\n    error,\n    hintProps,\n    errorProps,\n    formGroupProps,\n    inputType,\n    disableErrorLine,\n    name,\n    ...rest\n  } = props;\n  const [generatedID] = useState<string>(generateRandomID(inputType));\n  const { isFieldset, registerComponent, passError } =\n    useContext<IFieldsetContext>(FieldsetContext);\n  const { disableErrorFromComponents } = useFormContext();\n\n  const elementID = id || generatedID;\n  const labelID = `${elementID}--label`;\n  const errorID = `${elementID}--error-message`;\n  const hintID = `${elementID}--hint`;\n\n  const childProps = {\n    'aria-describedby': hint ? hintID : undefined,\n    'aria-labelledby': label ? labelID : undefined,\n    error,\n    name: name || elementID,\n    id: elementID,\n    ...rest,\n  } as FormElementRenderProps<T>;\n\n  useEffect(() => {\n    if (!isFieldset) return;\n    passError(elementID, disableErrorFromComponents ? false : Boolean(error));\n    return () => passError(elementID, false);\n  }, [elementID, error, isFieldset]);\n\n  useEffect(() => {\n    registerComponent(elementID);\n    return () => registerComponent(elementID, true);\n  }, []);\n\n  const { className: formGroupClassName, ...formGroupRestProps } = formGroupProps || {};\n\n  return (\n    <div\n      className={classNames(\n        'nhsuk-form-group',\n        {\n          'nhsuk-form-group--error': !disableErrorFromComponents && !disableErrorLine && error,\n        },\n        formGroupClassName,\n      )}\n      {...formGroupRestProps}\n    >\n      {label ? (\n        <Label id={labelID} htmlFor={elementID} {...labelProps}>\n          {label}\n        </Label>\n      ) : null}\n      {hint ? (\n        <Hint id={hintID} {...hintProps}>\n          {hint}\n        </Hint>\n      ) : null}\n      {error && typeof error === 'string' ? (\n        <ErrorMessage id={errorID} {...errorProps}>\n          {error}\n        </ErrorMessage>\n      ) : null}\n      {children(childProps)}\n    </div>\n  );\n};\n\nexport default FormGroup;\n","import { createContext } from 'react';\n\nexport interface ICheckboxContext {\n  name: string;\n  getBoxId: (reference: string) => string | undefined;\n  setConditional: (boxReference: string, hasConditional: boolean) => void;\n  leaseReference: () => string;\n  unleaseReference: (reference: string) => void;\n}\n\nexport default createContext<ICheckboxContext>({\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  name: '',\n  getBoxId: () => undefined,\n  setConditional: () => {},\n  leaseReference: () => '',\n  unleaseReference: () => {},\n});\n","import React, {\n  HTMLProps,\n  useContext,\n  ReactNode,\n  useEffect,\n  useState,\n  MutableRefObject,\n} from 'react';\nimport classNames from 'classnames';\nimport CheckboxContext, { ICheckboxContext } from '../CheckboxContext';\nimport Label, { LabelProps } from '../../label/Label';\nimport Hint, { HintProps } from '../../hint/Hint';\n\ntype BoxProps = Omit<HTMLProps<HTMLInputElement>, 'label'> & {\n  labelProps?: LabelProps;\n  hint?: string;\n  hintProps?: HintProps;\n  conditional?: ReactNode;\n  forceShowConditional?: boolean;\n  conditionalWrapperProps?: HTMLProps<HTMLDivElement>;\n  inputRef?: MutableRefObject<HTMLInputElement | null>;\n};\n\nconst Box: React.FC<BoxProps> = ({\n  id,\n  labelProps,\n  children,\n  hint,\n  hintProps,\n  conditional,\n  defaultChecked,\n  checked,\n  onChange,\n  inputRef,\n  forceShowConditional,\n  conditionalWrapperProps,\n  ...rest\n}) => {\n  const { getBoxId, name, setConditional, unleaseReference, leaseReference } =\n    useContext<ICheckboxContext>(CheckboxContext);\n\n  const [boxReference] = useState<string>(leaseReference());\n  const [showConditional, setShowConditional] = useState<boolean>(!!(checked || defaultChecked));\n  const inputID = id || getBoxId(boxReference);\n\n  const { className: labelClassName, ...restLabelProps } = labelProps || {};\n  const { className: hintClassName, ...restHintProps } = hintProps || {};\n  const { className: conditionalClassName, ...restConditionalProps } =\n    conditionalWrapperProps || {};\n\n  useEffect(() => () => unleaseReference(boxReference), []);\n\n  useEffect(() => {\n    if (checked !== undefined) {\n      setShowConditional(checked);\n    }\n  }, [checked]);\n\n  useEffect(() => {\n    setConditional(boxReference, Boolean(conditional));\n    return () => setConditional(boxReference, false);\n  }, [conditional]);\n\n  return (\n    <>\n      <div className=\"nhsuk-checkboxes__item\">\n        <input\n          className=\"nhsuk-checkboxes__input\"\n          onChange={(e) => {\n            if (checked === undefined) setShowConditional(e.target.checked);\n            if (onChange) onChange(e);\n          }}\n          name={name}\n          id={inputID}\n          checked={checked}\n          defaultChecked={defaultChecked}\n          ref={inputRef}\n          {...rest}\n        />\n        {children ? (\n          <Label\n            className={classNames('nhsuk-checkboxes__label', labelClassName)}\n            id={`${inputID}--label`}\n            htmlFor={inputID}\n            {...restLabelProps}\n          >\n            {children}\n          </Label>\n        ) : null}\n        {hint ? (\n          <Hint className={classNames('nhsuk-checkboxes__hint', hintClassName)} {...restHintProps}>\n            {hint}\n          </Hint>\n        ) : null}\n      </div>\n      {conditional && (showConditional || forceShowConditional) ? (\n        <div\n          className={classNames('nhsuk-radios__conditional', conditionalClassName)}\n          id={`${inputID}--conditional`}\n          {...restConditionalProps}\n        >\n          {conditional}\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nBox.defaultProps = {\n  type: 'checkbox',\n};\n\nexport default Box;\n","import React, { HTMLProps, PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { FormElementProps } from '../../util/types/FormTypes';\nimport FormGroup from '../../util/FormGroup';\nimport CheckboxContext, { ICheckboxContext } from './CheckboxContext';\nimport Box from './components/Box';\nimport { generateRandomName } from '../../util/RandomID';\n\ninterface CheckboxesProps extends HTMLProps<HTMLDivElement>, FormElementProps {\n  idPrefix?: string;\n}\n\ntype CheckboxesState = {\n  conditionalBoxes: Array<string>;\n};\n\nclass Checkboxes extends PureComponent<CheckboxesProps, CheckboxesState> {\n  private boxCount = 0;\n\n  private boxReferences: Array<string> = [];\n\n  private boxIds: Record<string, string> = {};\n\n  constructor(props: CheckboxesProps) {\n    super(props);\n    this.state = {\n      conditionalBoxes: [],\n    };\n  }\n\n  leaseReference = (): string => {\n    const reference = generateRandomName();\n    if (this.boxReferences.includes(reference)) {\n      return this.leaseReference();\n    }\n    this.boxReferences.push(reference);\n    return reference;\n  };\n\n  unleaseReference = (reference: string): void => {\n    this.boxReferences = this.boxReferences.filter((ref) => ref !== reference);\n  };\n\n  setConditional = (boxReference: string, hasConditional: boolean): void => {\n    this.setState((state) => {\n      const currentHasConditional = state.conditionalBoxes.includes(boxReference);\n      if (currentHasConditional && hasConditional === false) {\n        return {\n          ...state,\n          conditionalBoxes: state.conditionalBoxes.filter((ref) => ref !== boxReference),\n        };\n      }\n      if (!currentHasConditional && hasConditional === true) {\n        return {\n          ...state,\n          conditionalBoxes: [...state.conditionalBoxes, boxReference],\n        };\n      }\n      return state;\n    });\n  };\n\n  getBoxId = (id: string, reference: string): string => {\n    const { idPrefix } = this.props;\n    if (reference in this.boxIds) {\n      return this.boxIds[reference];\n    }\n    this.boxCount += 1;\n    this.boxIds[reference] = `${idPrefix || id}-${this.boxCount}`;\n    return this.boxIds[reference];\n  };\n\n  resetBoxIds = (): void => {\n    this.boxCount = 0;\n    this.boxIds = {};\n  };\n\n  static Box = Box;\n\n  render(): JSX.Element {\n    const { children, ...rest } = this.props;\n    return (\n      <FormGroup<CheckboxesProps> inputType=\"checkboxes\" {...rest}>\n        {/* eslint-disable-next-line @typescript-eslint/no-unused-vars */}\n        {({ className, name, id, idPrefix, error, ...restRenderProps }) => {\n          this.resetBoxIds();\n          const containsConditional = this.state.conditionalBoxes.length > 0;\n          const contextValue: ICheckboxContext = {\n            name,\n            getBoxId: (reference) => this.getBoxId(id, reference),\n            setConditional: this.setConditional,\n            leaseReference: this.leaseReference,\n            unleaseReference: this.unleaseReference,\n          };\n          return (\n            <div\n              className={classNames(\n                'nhsuk-checkboxes',\n                { 'nhsuk-checkboxes--conditional': containsConditional },\n                className,\n              )}\n              id={id}\n              {...restRenderProps}\n            >\n              <CheckboxContext.Provider value={contextValue}>{children}</CheckboxContext.Provider>\n            </div>\n          );\n        }}\n      </FormGroup>\n    );\n  }\n}\n\nexport default Checkboxes;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\ninterface ContentsListItemProps extends HTMLProps<HTMLAnchorElement> {\n  current?: boolean;\n}\n\nconst ContentsListItem: React.FC<ContentsListItemProps> = ({ className, current, ...rest }) => (\n  <li className={classNames('nhsuk-contents-list__item', className)}>\n    {current ? (\n      <span className=\"nhsuk-contents-list__current\" {...rest} />\n    ) : (\n      <a className=\"nhsuk-contents-list__link\" {...rest} />\n    )}\n  </li>\n);\n\ninterface ContentsListProps extends HTMLProps<HTMLDivElement> {\n  visuallyHiddenText?: false | string;\n}\n\ninterface ContentsList extends React.FC<ContentsListProps> {\n  Item: React.FC<ContentsListItemProps>;\n}\n\nconst ContentsList: ContentsList = ({\n  className, children, visuallyHiddenText, ...rest\n}) => (\n  <nav className={classNames('nhsuk-contents-list', className)} {...rest}>\n    {visuallyHiddenText !== false ? (\n      <h2 className=\"nhsuk-u-visually-hidden\">{visuallyHiddenText}</h2>\n    ) : null}\n    <ol className=\"nhsuk-contents-list__list\">{children}</ol>\n  </nav>\n);\n\nContentsList.defaultProps = {\n  role: 'navigation',\n  visuallyHiddenText: 'Contents',\n};\n\nContentsList.Item = ContentsListItem;\n\nexport default ContentsList;\n","import { createContext, ChangeEvent } from 'react';\n\nexport type IDateInputContext = {\n  id: string;\n  name: string;\n  error: string | boolean | undefined;\n  value?: { day?: string; month?: string; year?: string };\n  defaultValue?: { day?: string; month?: string; year?: string };\n  registerRef: (inputType: 'day' | 'month' | 'year', ref: null | HTMLInputElement) => void;\n  handleChange: (inputType: 'day' | 'month' | 'year', event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst DateInputContext = createContext<IDateInputContext>({\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  id: '',\n  name: '',\n  registerRef: () => {},\n  handleChange: () => {},\n  error: undefined,\n});\n\nexport default DateInputContext;\n","import React, { HTMLProps, useContext, ChangeEvent } from 'react';\nimport classNames from 'classnames';\nimport Label, { LabelProps } from '../../label/Label';\nimport DateInputContext, { IDateInputContext } from '../DateInputContext';\n\nexport interface IndividualDateInputProps extends HTMLProps<HTMLInputElement> {\n  labelProps?: LabelProps;\n  inputType: 'day' | 'month' | 'year';\n  inputRef?: (ref: HTMLInputElement | null) => void;\n  error?: boolean;\n}\n\nconst labels: Record<'day' | 'month' | 'year', string> = {\n  day: 'Day',\n  month: 'Month',\n  year: 'Year',\n};\n\nconst IndividualDateInput: React.FC<IndividualDateInputProps> = ({\n  label,\n  labelProps,\n  inputType,\n  className,\n  id,\n  name,\n  onChange,\n  inputRef,\n  error,\n  value,\n  defaultValue,\n  ...rest\n}) => {\n  const {\n    id: ctxId,\n    name: ctxName,\n    error: ctxError,\n    value: ctxValue,\n    defaultValue: ctxDefaultValue,\n    handleChange: ctxHandleChange,\n    registerRef,\n  } = useContext<IDateInputContext>(DateInputContext);\n\n  const { className: labelClassName, ...restLabelProps } = labelProps || {};\n\n  const inputID = id || `${ctxId}-${inputType}`;\n  const inputName = name || `${ctxName}-${inputType}`;\n  const inputValue = value !== undefined ? value : ctxValue?.[inputType];\n  const inputDefaultValue = defaultValue !== undefined ? defaultValue : ctxDefaultValue?.[inputType];\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n    if (onChange) onChange(e);\n    if (!e.isPropagationStopped()) {\n      ctxHandleChange(inputType, e);\n    }\n  };\n\n  const refCallback = (ref: HTMLInputElement | null) => {\n    registerRef(inputType, ref);\n    if (inputRef) inputRef(ref);\n  };\n\n  return (\n    <div className=\"nhsuk-date-input__item\">\n      <div className=\"nhsuk-form-group\">\n        <Label\n          className={classNames('nhsuk-date-input__label', labelClassName)}\n          id={`${inputID}--label`}\n          htmlFor={inputID}\n          {...restLabelProps}\n        >\n          {label || labels[inputType]}\n        </Label>\n        <input\n          className={classNames(\n            'nhsuk-input nhsuk-date-input__input',\n            { 'nhsuk-input--width-2': inputType === 'day' || inputType === 'month' },\n            { 'nhsuk-input--width-4': inputType === 'year' },\n            { 'nhsuk-input--error': error === undefined ? ctxError : error },\n            className,\n          )}\n          value={inputValue}\n          defaultValue={inputDefaultValue}\n          id={inputID}\n          aria-labelledby={restLabelProps.id || `${inputID}--label`}\n          name={inputName}\n          onChange={handleChange}\n          ref={refCallback}\n          {...rest}\n        />\n      </div>\n    </div>\n  );\n};\n\nIndividualDateInput.defaultProps = {\n  pattern: '[0-9]*',\n  inputMode: 'numeric',\n  type: 'text',\n};\n\nexport const DayInput: React.FC<Omit<IndividualDateInputProps, 'inputType'>> = (props) => (\n  <IndividualDateInput inputType=\"day\" {...props} />\n);\n\nexport const MonthInput: React.FC<Omit<IndividualDateInputProps, 'inputType'>> = (props) => (\n  <IndividualDateInput inputType=\"month\" {...props} />\n);\n\nexport const YearInput: React.FC<Omit<IndividualDateInputProps, 'inputType'>> = (props) => (\n  <IndividualDateInput inputType=\"year\" {...props} />\n);\n","import React, { HTMLProps, PureComponent, ChangeEvent } from 'react';\nimport classNames from 'classnames';\nimport { DayInput, MonthInput, YearInput } from './components/IndividualDateInputs';\nimport FormGroup from '../../util/FormGroup';\nimport DateInputContext, { IDateInputContext } from './DateInputContext';\nimport { FormElementProps } from '../../util/types/FormTypes';\n\ntype DateInputValue = {\n  day: string;\n  month: string;\n  year: string;\n};\n\ntype DateInputChangeEvent = ChangeEvent<HTMLInputElement> & {\n  target: HTMLInputElement & { value: DateInputValue };\n  currentTarget: HTMLInputElement & { value: DateInputValue };\n};\n\ninterface DateInputProps\n  extends Omit<HTMLProps<HTMLDivElement>, 'value' | 'defaultValue'>,\n    FormElementProps {\n  autoSelectNext?: boolean;\n  value?: Partial<DateInputValue>;\n  defaultValue?: Partial<DateInputValue>;\n  onChange?: (e: DateInputChangeEvent) => void;\n}\n\ninterface DateInputState {\n  values: {\n    day: string;\n    month: string;\n    year: string;\n  };\n}\n\ninterface DateInput extends PureComponent<DateInputProps, DateInputState> {\n  monthRef: null | HTMLInputElement;\n  yearRef: null | HTMLInputElement;\n}\n\nclass DateInput extends PureComponent<DateInputProps, DateInputState> {\n  static Day = DayInput;\n\n  static Month = MonthInput;\n\n  static Year = YearInput;\n\n  constructor(props: DateInputProps) {\n    super(props);\n    this.state = {\n      values: {\n        day: props.value?.day || '',\n        month: props.value?.month || '',\n        year: props.value?.year || '',\n      },\n    };\n\n    this.monthRef = null;\n    this.yearRef = null;\n  }\n\n  componentDidUpdate(prevProps: DateInputProps): void {\n    if (this.props.value && prevProps.value !== this.props.value) {\n      // This is the only way that we can update our internal state\n      // when the value updates. We check if the value has changed first,\n      // preventing an infinite loop.\n      //\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState((state) => {\n        if (!this.props.value) return state;\n\n        const newState = { ...state };\n        const { day, month, year } = this.props.value;\n        if (day && day !== state.values.day) newState.values.day = day;\n        if (month && month !== state.values.month) newState.values.month = month;\n        if (year && year !== state.values.year) newState.values.year = year;\n\n        return newState;\n      });\n    }\n  }\n\n  handleSelectNext = (inputType: 'day' | 'month' | 'year', value: string): void => {\n    if (!this.props.autoSelectNext) return;\n    if (inputType === 'day' && value.length === 2 && this.monthRef) {\n      this.monthRef.focus();\n    } else if (inputType === 'month' && value.length === 2 && this.yearRef) {\n      this.yearRef.focus();\n    }\n  };\n\n  handleChange = (\n    inputType: 'day' | 'month' | 'year',\n    event: ChangeEvent<HTMLInputElement>,\n  ): void => {\n    this.handleSelectNext(inputType, event.target.value);\n    event.stopPropagation();\n    this.setState((state) => {\n      const newEventValue = {\n        ...state.values,\n        [inputType]: event.target.value,\n      };\n      if (this.props.onChange) {\n        const newEvent = {\n          ...event,\n          target: { ...event.target, value: newEventValue },\n          currentTarget: { ...event.currentTarget, value: newEventValue },\n        } as DateInputChangeEvent;\n        this.props.onChange(newEvent);\n      }\n      return { values: newEventValue };\n    });\n  };\n\n  registerRef = (inputType: 'day' | 'month' | 'year', ref: HTMLInputElement | null): void => {\n    if (inputType === 'month') this.monthRef = ref;\n    if (inputType === 'year') this.yearRef = ref;\n  };\n\n  render(): JSX.Element {\n    const {\n      children,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onChange,\n      value,\n      defaultValue,\n      ...rest\n    } = this.props;\n\n    return (\n      <FormGroup<Omit<DateInputProps, 'value' | 'defaultValue'>> inputType=\"dateinput\" {...rest}>\n        {/* eslint-disable-next-line @typescript-eslint/no-unused-vars */}\n        {({ className, name, id, error, autoSelectNext, ...restRenderProps }) => {\n          const contextValue: IDateInputContext = {\n            id,\n            name,\n            error,\n            value,\n            defaultValue,\n            handleChange: this.handleChange,\n            registerRef: this.registerRef,\n          };\n          return (\n            <div className={classNames('nhsuk-date-input', className)} {...restRenderProps} id={id}>\n              <DateInputContext.Provider value={contextValue}>\n                {children || (\n                  <>\n                    <DateInput.Day />\n                    <DateInput.Month />\n                    <DateInput.Year />\n                  </>\n                )}\n              </DateInputContext.Provider>\n            </div>\n          );\n        }}\n      </FormGroup>\n    );\n  }\n}\n\nexport default DateInput;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\ninterface DetailsProps extends HTMLProps<HTMLDetailsElement> {\n  expander?: boolean;\n}\n\ninterface Details extends React.FC<DetailsProps> {\n  Summary: React.FC<HTMLProps<HTMLDivElement>>;\n  Text: React.FC<HTMLProps<HTMLDivElement>>;\n  ExpanderGroup: React.FC<HTMLProps<HTMLDivElement>>;\n}\n\n// TODO: Check if standard NHS.UK polyfill \"details.polyfill.js\" is required\nconst Details: Details = ({ className, expander, ...rest }) => (\n  <details\n    className={classNames('nhsuk-details', { 'nhsuk-expander': expander }, className)}\n    {...rest}\n  />\n);\n\nconst DetailsSummary: React.FC<HTMLProps<HTMLDivElement>> = ({ className, children, ...rest }) => (\n  <summary className={classNames('nhsuk-details__summary', className)} {...rest}>\n    <span className=\"nhsuk-details__summary-text\">{children}</span>\n  </summary>\n);\n\nconst DetailsText: React.FC<HTMLProps<HTMLDivElement>> = ({ className, ...rest }) => (\n  <div className={classNames('nhsuk-details__text', className)} {...rest} />\n);\n\nconst ExpanderGroup: React.FC<HTMLProps<HTMLDivElement>> = ({ className, ...rest }) => (\n  <div className={classNames('nhsuk-expander-group', className)} {...rest} />\n);\n\nDetails.Summary = DetailsSummary;\nDetails.Text = DetailsText;\nDetails.ExpanderGroup = ExpanderGroup;\n\nexport default Details;\n","import React, { HTMLProps, createContext, useContext } from 'react';\nimport classNames from 'classnames';\nimport { Tick, Cross } from '../icons';\nimport HeadingLevel, { HeadingLevelType } from '../../util/HeadingLevel';\n\ntype ListType = 'do' | 'dont';\n\ninterface DoDontListProps extends HTMLProps<HTMLDivElement> {\n  listType: ListType;\n  heading?: string;\n  headingLevel?: HeadingLevelType;\n}\n\ninterface DoDontList extends React.FC<DoDontListProps> {\n  Item: React.FC<DoDontItemProps>;\n}\n\nconst DoDontListContext = createContext<ListType>('do');\n\nconst DoDontList: DoDontList = ({\n  className,\n  listType,\n  children,\n  heading,\n  headingLevel,\n  ...rest\n}) => (\n  <div className={classNames('nhsuk-do-dont-list', className)} {...rest}>\n    <HeadingLevel className=\"nhsuk-do-dont-list__label\" headingLevel={headingLevel}>\n      {heading || (listType === 'do' ? 'Do' : \"Don't\")}\n    </HeadingLevel>\n    <ul\n      className={classNames(\n        'nhsuk-list',\n        { 'nhsuk-list--tick': listType === 'do' },\n        { 'nhsuk-list--cross': listType === 'dont' },\n      )}\n    >\n      <DoDontListContext.Provider value={listType}>{children}</DoDontListContext.Provider>\n    </ul>\n  </div>\n);\n\ninterface DoDontItemProps extends HTMLProps<HTMLLIElement> {\n  listItemType?: ListType;\n}\n\nconst DoDontItem: React.FC<DoDontItemProps> = ({ children, listItemType, ...rest }) => {\n  const listItem = useContext(DoDontListContext);\n  return (\n    <li {...rest}>\n      {(listItemType || listItem) === 'do' ? <Tick /> : <Cross />}\n      {children}\n    </li>\n  );\n};\n\nDoDontList.Item = DoDontItem;\n\nexport default DoDontList;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nconst ErrorSummaryTitle: React.FC<HTMLProps<HTMLHeadingElement>> = ({ className, ...rest }) => (\n  <h2 className={classNames('nhsuk-error-summary__title', className)} {...rest} />\n);\n\nconst ErrorSummaryBody: React.FC<HTMLProps<HTMLDivElement>> = ({ className, ...rest }) => (\n  <div className={classNames('nhsuk-error-summary__body', className)} {...rest} />\n);\n\nconst ErrorSummaryList: React.FC<HTMLProps<HTMLUListElement>> = ({ className, ...rest }) => (\n  <ul className={classNames('nhsuk-list', 'nhsuk-error-summary__list', className)} {...rest} />\n);\n\nconst ErrorSummaryListItem: React.FC<HTMLProps<HTMLAnchorElement>> = (props) => (\n  <li>\n    <a {...props} />\n  </li>\n);\n\ninterface ErrorSummary extends React.FC<HTMLProps<HTMLDivElement>> {\n  Title: React.FC<HTMLProps<HTMLHeadingElement>>;\n  Body: React.FC<HTMLProps<HTMLDivElement>>;\n  List: React.FC<HTMLProps<HTMLUListElement>>;\n  Item: React.FC<HTMLProps<HTMLAnchorElement>>;\n}\n\nconst ErrorSummary: ErrorSummary = ({ className, ...rest }) => (\n  <div className={classNames('nhsuk-error-summary', className)} {...rest} />\n);\n\nErrorSummary.Title = ErrorSummaryTitle;\nErrorSummary.Body = ErrorSummaryBody;\nErrorSummary.List = ErrorSummaryList;\nErrorSummary.Item = ErrorSummaryListItem;\n\nexport default ErrorSummary;\n","import React, { HTMLProps, PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { NHSUKSize } from '../../util/types/NHSUKTypes';\nimport HeadingLevel, { HeadingLevelType } from '../../util/HeadingLevel';\nimport FieldsetContext, { IFieldsetContext } from './FieldsetContext';\n\ninterface LegendProps extends Omit<HTMLProps<HTMLLegendElement>, 'size'> {\n  isPageHeading?: boolean;\n  headingLevel?: HeadingLevelType;\n  size?: NHSUKSize;\n}\n\nconst Legend: React.FC<LegendProps> = ({\n  className,\n  children,\n  isPageHeading,\n  headingLevel,\n  size,\n  ...rest\n}) => (\n  <legend\n    className={classNames(\n      'nhsuk-fieldset__legend',\n      {\n        'nhsuk-fieldset__legend--xl': isPageHeading && !size,\n      },\n      { [`nhsuk-fieldset__legend--${size}`]: size },\n      className,\n    )}\n    {...rest}\n  >\n    {isPageHeading ? (\n      <HeadingLevel className=\"nhsuk-fieldset__heading\" headingLevel={headingLevel}>\n        {children}\n      </HeadingLevel>\n    ) : (\n      children\n    )}\n  </legend>\n);\n\nLegend.defaultProps = {\n  headingLevel: 'h1',\n};\n\ninterface FieldsetProps extends HTMLProps<HTMLFieldSetElement> {\n  disableErrorLine?: boolean;\n}\n\ntype FieldsetState = { registeredComponents: Array<string>; erroredComponents: Array<string> };\n\nclass Fieldset extends PureComponent<FieldsetProps, FieldsetState> {\n  static Legend = Legend;\n\n  constructor(props: FieldsetProps) {\n    super(props);\n    this.state = {\n      registeredComponents: [],\n      erroredComponents: [],\n    };\n  }\n\n  passError = (componentId: string, error: boolean): void => {\n    this.setState((state) => {\n      const existingError = state.erroredComponents.includes(componentId);\n      if (existingError && !error) {\n        return {\n          ...state,\n          erroredComponents: state.erroredComponents.filter((id) => id !== componentId),\n        };\n      }\n      if (!existingError && error) {\n        return { ...state, erroredComponents: [...state.erroredComponents, componentId] };\n      }\n      return state;\n    });\n  };\n\n  registerComponent = (componentId: string, deregister = false): void => {\n    this.setState((state) => {\n      if (deregister) {\n        return {\n          ...state,\n          registeredComponents: state.registeredComponents.filter((id) => id !== componentId),\n        };\n      }\n      if (!state.registeredComponents.includes(componentId)) {\n        return {\n          ...state,\n          registeredComponents: [...state.registeredComponents, componentId],\n        };\n      }\n      return state;\n    });\n  };\n\n  render(): JSX.Element {\n    const { className, disableErrorLine, ...rest } = this.props;\n    const contextValue: IFieldsetContext = {\n      isFieldset: true,\n      registerComponent: this.registerComponent,\n      passError: this.passError,\n    };\n\n    const containsFormElements = this.state.registeredComponents.length > 0;\n    const containsError = this.state.erroredComponents.length > 0;\n\n    return (\n      <FieldsetContext.Provider value={contextValue}>\n        {containsFormElements ? (\n          <div\n            className={classNames('nhsuk-form-group', {\n              'nhsuk-form-group--error': disableErrorLine ? false : containsError,\n            })}\n          >\n            <fieldset className={classNames('nhsuk-fieldset', className)} {...rest} />\n          </div>\n        ) : (\n          <fieldset className={classNames('nhsuk-fieldset', className)} {...rest} />\n        )}\n      </FieldsetContext.Provider>\n    );\n  }\n}\n\nFieldset.Legend = Legend;\n\nexport default Fieldset;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\nimport { Container } from '../layout';\n\ninterface FooterListProps extends HTMLProps<HTMLOListElement> {\n  columns?: boolean;\n}\n\nconst FooterList: React.FC<FooterListProps> = ({ className, columns, ...rest }) => (\n  <ul\n    className={classNames(\n      'nhsuk-footer__list',\n      { 'nhsuk-footer__list--three-columns': columns },\n      className,\n    )}\n    {...rest}\n  />\n);\n\nconst FooterListItem: React.FC<HTMLProps<HTMLAnchorElement>> = ({ className, ...rest }) => (\n  <li className=\"nhsuk-footer__list-item\">\n    <a className={classNames('nhsuk-footer__list-item-link', className)} {...rest} />\n  </li>\n);\n\nconst FooterCopyright: React.FC<HTMLProps<HTMLParagraphElement>> = ({ className, ...rest }) => (\n  <p className={classNames('nhsuk-footer__copyright', className)} {...rest} />\n);\n\ninterface FooterProps extends HTMLProps<HTMLDivElement> {\n  visuallyHiddenText?: false | string;\n}\n\ninterface Footer extends React.FC<FooterProps> {\n  List: React.FC<FooterListProps>;\n  ListItem: React.FC<HTMLProps<HTMLAnchorElement>>;\n  Copyright: React.FC<HTMLProps<HTMLParagraphElement>>;\n}\n\nconst Footer: Footer = ({\n  className, children, visuallyHiddenText, ...rest\n}) => (\n  <footer {...rest}>\n    <div className={classNames('nhsuk-footer', className)}>\n      <Container>\n        {visuallyHiddenText ? (\n          <h2 className=\"nhsuk-u-visually-hidden\">{visuallyHiddenText}</h2>\n        ) : null}\n        {children}\n      </Container>\n    </div>\n  </footer>\n);\n\nFooter.defaultProps = {\n  visuallyHiddenText: 'Support links',\n};\n\nFooter.List = FooterList;\nFooter.ListItem = FooterListItem;\nFooter.Copyright = FooterCopyright;\n\nexport default Footer;\n","import { createContext } from 'react';\n\nexport interface IHeaderContext {\n  orgName: string | undefined;\n  serviceName: string | undefined;\n  orgSplit: string | undefined;\n  orgDescriptor: string | undefined;\n  setSearch: (toggle: boolean) => void;\n  setMenuToggle: (toggle: boolean) => void;\n  toggleMenu: () => void;\n  toggleSearch: () => void;\n  hasSearch: boolean;\n  hasMenuToggle: boolean;\n  menuOpen: boolean;\n  searchOpen: boolean;\n}\n\nexport default createContext<IHeaderContext>({\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  orgName: undefined,\n  serviceName: undefined,\n  orgSplit: undefined,\n  orgDescriptor: undefined,\n  setSearch: () => {},\n  setMenuToggle: () => {},\n  hasSearch: false,\n  hasMenuToggle: false,\n  toggleMenu: () => {},\n  toggleSearch: () => {},\n  menuOpen: false,\n  searchOpen: false,\n});\n","import React, { useContext, SVGProps } from 'react';\nimport classNames from 'classnames';\nimport HeaderContext, { IHeaderContext } from '../HeaderContext';\nimport type { AsElementLink } from '../../../util/types/LinkTypes';\n\ninterface SVGImageWithSrc extends SVGProps<SVGImageElement> {\n  src: string;\n}\n\nexport type NHSLogoNavProps = AsElementLink<HTMLAnchorElement>\n\nconst SVGImageWithSrc: React.FC<SVGImageWithSrc> = (props) => <image {...props} />;\n\nconst NHSLogo: React.FC<NHSLogoNavProps> = ({\n  className,\n  alt,\n  asElement: Component = 'a',\n  ...rest\n}) => {\n  const { serviceName, hasMenuToggle, hasSearch } = useContext<IHeaderContext>(HeaderContext);\n  return (\n    <div\n      className={classNames('nhsuk-header__logo', {\n        'nhsuk-header__logo--only': !hasMenuToggle && !hasSearch,\n      })}\n    >\n      <Component\n        className={classNames(\n          'nhsuk-header__link',\n          { 'nhsuk-header__link--service': serviceName },\n          className,\n        )}\n        {...rest}\n      >\n        <svg\n          className=\"nhsuk-logo\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          role=\"img\"\n          focusable=\"false\"\n          viewBox=\"0 0 40 16\"\n          aria-labelledby=\"nhsuk-logo_title\"\n        >\n          <title id=\"nhsuk-logo_title\">{alt}</title>\n          <path className=\"nhsuk-logo__background\" d=\"M0 0h40v16H0z\" />\n          <path\n            className=\"nhsuk-logo__text\"\n            d=\"M3.9 1.5h4.4l2.6 9h.1l1.8-9h3.3l-2.8 13H9l-2.7-9h-.1l-1.8 9H1.1M17.3 1.5h3.6l-1 4.9h4L25 1.5h3.5l-2.7 13h-3.5l1.1-5.6h-4.1l-1.2 5.6h-3.4M37.7 4.4c-.7-.3-1.6-.6-2.9-.6-1.4 0-2.5.2-2.5 1.3 0 1.8 5.1 1.2 5.1 5.1 0 3.6-3.3 4.5-6.4 4.5-1.3 0-2.9-.3-4-.7l.8-2.7c.7.4 2.1.7 3.2.7s2.8-.2 2.8-1.5c0-2.1-5.1-1.3-5.1-5 0-3.4 2.9-4.4 5.8-4.4 1.6 0 3.1.2 4 .6\"\n          />\n          <SVGImageWithSrc src=\"https://assets.nhs.uk/images/nhs-logo.png\" xlinkHref=\"\" />\n        </svg>\n        {serviceName ? <span className=\"nhsuk-header__service-name\">{serviceName}</span> : null}\n      </Component>\n    </div>\n  );\n};\n\nNHSLogo.defaultProps = {\n  'aria-label': 'NHS homepage',\n  alt: 'NHS Logo',\n};\n\nexport default NHSLogo;\n","import React, { useContext } from 'react';\nimport HeaderContext, { IHeaderContext } from '../HeaderContext';\nimport type { AsElementLink } from '../../../util/types/LinkTypes';\n\nexport interface OrganisationalLogoProps extends AsElementLink<HTMLAnchorElement> {\n  logoUrl?: string;\n}\n\nconst OrganisationalLogo: React.FC<OrganisationalLogoProps> = ({\n  logoUrl, alt, asElement: Component = 'a', ...rest\n}) => {\n  const { orgName, orgSplit, orgDescriptor } = useContext<IHeaderContext>(HeaderContext);\n  return (\n    <div className=\"nhsuk-header__logo\">\n      <Component className=\"nhsuk-header__link\" {...rest}>\n        {logoUrl ? (\n          <img className=\"nhsuk-org-logo\" src={logoUrl} alt={alt} />\n        ) : (\n          <>\n            <svg\n              className=\"nhsuk-logo\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              role=\"img\"\n              focusable=\"false\"\n              viewBox=\"0 0 40 16\"\n              aria-labelledby=\"nhsuk-logo_title\"\n            >\n              <title id=\"nhsuk-logo_title\">{alt}</title>\n              <path className=\"nhsuk-logo__background\" d=\"M0 0h40v16H0z\" />\n              <path\n                className=\"nhsuk-logo__text\"\n                d=\"M3.9 1.5h4.4l2.6 9h.1l1.8-9h3.3l-2.8 13H9l-2.7-9h-.1l-1.8 9H1.1M17.3 1.5h3.6l-1 4.9h4L25 1.5h3.5l-2.7 13h-3.5l1.1-5.6h-4.1l-1.2 5.6h-3.4M37.7 4.4c-.7-.3-1.6-.6-2.9-.6-1.4 0-2.5.2-2.5 1.3 0 1.8 5.1 1.2 5.1 5.1 0 3.6-3.3 4.5-6.4 4.5-1.3 0-2.9-.3-4-.7l.8-2.7c.7.4 2.1.7 3.2.7s2.8-.2 2.8-1.5c0-2.1-5.1-1.3-5.1-5 0-3.4 2.9-4.4 5.8-4.4 1.6 0 3.1.2 4 .6\"\n              />\n              <img src=\"https://assets.nhs.uk/images/nhs-logo.png\" />\n            </svg>\n            <span className=\"nhsuk-organisation-name\">\n              {orgName}\n              {orgSplit ? (\n                <>\n                  {' '}\n                  <span className=\"nhsuk-organisation-name-split\">{orgSplit}</span>\n                </>\n              ) : null}\n            </span>\n            {orgDescriptor ? (\n              <span className=\"nhsuk-organisation-descriptor\">{orgDescriptor}</span>\n            ) : null}\n          </>\n        )}\n      </Component>\n    </div>\n  );\n};\n\nexport default OrganisationalLogo;\n","import React, { HTMLProps, useContext, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Search as SearchIcon, Close as CloseIcon } from '../../icons';\nimport HeaderContext, { IHeaderContext } from '../HeaderContext';\n\nexport interface SearchProps extends HTMLProps<HTMLInputElement> {\n  visuallyHiddenText?: string;\n}\n\nconst Search: React.FC<SearchProps> = ({\n  action, method, id, visuallyHiddenText, ...rest\n}) => {\n  const { setSearch, toggleSearch, searchOpen } = useContext<IHeaderContext>(HeaderContext);\n  useEffect(() => {\n    setSearch(true);\n    return () => setSearch(false);\n  }, []);\n  return (\n    <div className=\"nhsuk-header__search\">\n      <button\n        className={classNames('nhsuk-header__search-toggle', { 'is-active': searchOpen })}\n        aria-label=\"Open search\"\n        aria-expanded={searchOpen ? 'true' : 'false'}\n        onClick={toggleSearch}\n      >\n        <SearchIcon />\n        <span className=\"nhsuk-u-visually-hidden\">Search</span>\n      </button>\n      <div className={classNames('nhsuk-header__search-wrap', { 'js-show': searchOpen })}>\n        <form className=\"nhsuk-header__search-form\" action={action} method={method} role=\"search\">\n          <label className=\"nhsuk-u-visually-hidden\" htmlFor={id}>\n            {visuallyHiddenText}\n          </label>\n          <input className=\"nhsuk-search__input\" id={id} {...rest} />\n          <button className=\"nhsuk-search__submit\" type=\"submit\">\n            <SearchIcon />\n            <span className=\"nhsuk-u-visually-hidden\">Search</span>\n          </button>\n          <button className=\"nhsuk-search__close\">\n            <CloseIcon />\n            <span className=\"nhsuk-u-visually-hidden\">Close search</span>\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nSearch.defaultProps = {\n  method: 'get',\n  role: 'search',\n  id: 'search-field',\n  visuallyHiddenText: 'Search the NHS website',\n  type: 'search',\n  autoComplete: 'off',\n  placeholder: 'Search',\n};\n\nexport default Search;\n","import React, { HTMLProps, useContext } from 'react';\nimport classNames from 'classnames';\nimport { Container } from '../../layout';\nimport { Close as CloseIcon } from '../../icons';\nimport HeaderContext, { IHeaderContext } from '../HeaderContext';\n\nconst Nav: React.FC<HTMLProps<HTMLDivElement>> = ({\n  className, children, open, ...rest\n}) => {\n  const { menuOpen, toggleMenu } = useContext<IHeaderContext>(HeaderContext);\n\n  return (\n    <nav\n      className={classNames(\n        'nhsuk-header__navigation',\n        { 'js-show': open !== undefined ? open : menuOpen },\n        className,\n      )}\n      {...rest}\n    >\n      <Container>\n        <p className=\"nhsuk-header__navigation-title\">\n          <span>Menu</span>\n          <button className=\"nhsuk-header__navigation-close\" type=\"button\" onClick={toggleMenu}>\n            <CloseIcon />\n            <span className=\"nhsuk-u-visually-hidden\">Close menu</span>\n          </button>\n        </p>\n        <ul className=\"nhsuk-header__navigation-list\">{children}</ul>\n      </Container>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { ChevronRight as ChevronRightIcon } from '../../icons';\nimport type { AsElementLink } from '../../../util/types/LinkTypes';\n\nexport interface NavItemProps extends AsElementLink<HTMLAnchorElement> {\n  mobileOnly?: boolean;\n}\n\nconst NavItem: React.FC<NavItemProps> = ({\n  mobileOnly,\n  className,\n  children,\n  asElement: Component = 'a',\n  ...rest\n}) => (\n  <li\n    className={classNames(\n      'nhsuk-header__navigation-item',\n      { 'nhsuk-header__navigation-item--for-mobile': mobileOnly },\n      className,\n    )}\n  >\n    <Component className=\"nhsuk-header__navigation-link\" {...rest}>\n      {children}\n      <ChevronRightIcon />\n    </Component>\n  </li>\n);\n\nexport default NavItem;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nconst NavItemList: React.FC<HTMLProps<HTMLUListElement>> = ({\n  children,\n  className,\n  ...rest\n}) => (\n  <ul\n    className={classNames(\n      'nhsuk-header__navigation-list',\n      className,\n    )}\n    {...rest}\n  >\n    {children}\n  </ul>\n);\n\nexport default NavItemList;\n","import React, { HTMLProps, useContext } from 'react';\nimport classNames from 'classnames';\nimport { Close as CloseIcon } from '../../icons';\nimport HeaderContext, { IHeaderContext } from '../HeaderContext';\n\nconst NavMenuClose: React.FC<HTMLProps<HTMLButtonElement>> = ({\n  className,\n  ...rest\n}) => {\n  const { toggleMenu } = useContext<IHeaderContext>(HeaderContext);\n\n  return (\n    <button\n      className={\n        classNames(\n          'nhsuk-header__navigation-close',\n          className,\n        )\n      }\n      {...rest}\n      type=\"button\"\n      onClick={toggleMenu}\n    >\n      <CloseIcon />\n      <span className=\"nhsuk-u-visually-hidden\">Close menu</span>\n    </button>\n  );\n};\n\nexport default NavMenuClose;\n","import React, { HTMLProps, useContext } from 'react';\nimport classNames from 'classnames';\nimport HeaderContext, { IHeaderContext } from '../HeaderContext';\n\nconst Content: React.FC<HTMLProps<HTMLDivElement>> = ({ className, ...rest }) => {\n  const { searchOpen } = useContext<IHeaderContext>(HeaderContext);\n  return (\n    <div\n      className={classNames('nhsuk-header__content', { 'js-show': searchOpen }, className)}\n      {...rest}\n    />\n  );\n};\nexport default Content;\n","import React, {\n  HTMLProps, useContext, useEffect, MouseEvent,\n} from 'react';\nimport classNames from 'classnames';\nimport HeaderContext, { IHeaderContext } from '../HeaderContext';\n\nexport interface MenuToggleProps extends HTMLProps<HTMLButtonElement> {\n  type?: 'button' | 'submit' | 'reset';\n}\n\nconst MenuToggle: React.FC<MenuToggleProps> = ({ onClick, ...rest }) => {\n  const { setMenuToggle, toggleMenu, menuOpen } = useContext<IHeaderContext>(HeaderContext);\n\n  const onToggleClick = (e: MouseEvent<HTMLButtonElement>) => {\n    toggleMenu();\n\n    if (onClick) {\n      onClick(e);\n    }\n  };\n\n  useEffect(() => {\n    setMenuToggle(true);\n    return () => setMenuToggle(false);\n  }, []);\n\n  return (\n    <div className=\"nhsuk-header__menu\">\n      <button\n        className={classNames('nhsuk-header__menu-toggle', { 'is-active': menuOpen })}\n        aria-label=\"Open menu\"\n        aria-expanded={menuOpen ? 'true' : 'false'}\n        onClick={onToggleClick}\n        {...rest}\n      >\n        Menu\n      </button>\n    </div>\n  );\n};\n\nexport default MenuToggle;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nexport interface TransactionalServiceNameProps extends HTMLProps<HTMLAnchorElement> {\n  long?: boolean;\n}\n\nconst TransactionalServiceName: React.FC<TransactionalServiceNameProps> = ({\n  className,\n  long,\n  ...rest\n}) => (\n  <div\n    className={classNames(\n      'nhsuk-header__transactional-service-name',\n      { 'nhsuk-header__transactional-service-name--long': long },\n      className,\n    )}\n  >\n    <a className=\"nhsuk-header__transactional-service-name--link\" {...rest} />\n  </div>\n);\n\nexport default TransactionalServiceName;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nconst NavTitle: React.FC<HTMLProps<HTMLParagraphElement>> = ({\n  children,\n  className,\n  ...rest\n}) => (\n  <p\n    className={classNames(\n      'nhsuk-header__navigation-title',\n      className,\n    )}\n    {...rest}\n  >\n    {children}\n  </p>\n);\n\nexport default NavTitle;\n","import React, { HTMLProps, useContext } from 'react';\nimport classNames from 'classnames';\nimport { Container } from '../../layout';\nimport HeaderContext, { IHeaderContext } from '../HeaderContext';\n\nconst NavContainer: React.FC<HTMLProps<HTMLDivElement>> = ({\n  className,\n  children,\n  open,\n  ...rest\n}) => {\n  const { menuOpen } = useContext<IHeaderContext>(HeaderContext);\n\n  return (\n    <nav\n      className={classNames(\n        'nhsuk-header__navigation',\n        { 'js-show': open !== undefined ? open : menuOpen },\n        className,\n      )}\n      {...rest}\n    >\n      <Container>\n        {children}\n      </Container>\n    </nav>\n  );\n};\n\nexport default NavContainer;\n","import React, { PureComponent, HTMLProps, useContext } from 'react';\nimport classNames from 'classnames';\nimport NHSLogo, { NHSLogoNavProps } from './components/NHSLogo';\nimport OrganisationalLogo, { OrganisationalLogoProps } from './components/OrganisationalLogo';\nimport HeaderContext, { IHeaderContext } from './HeaderContext';\nimport Search from './components/Search';\nimport Nav from './components/Nav';\nimport NavItem from './components/NavItem';\nimport NavItemList from './components/NavItemList';\nimport NavMenuClose from './components/NavMenuClose';\nimport { Container } from '../layout';\nimport Content from './components/Content';\nimport MenuToggle from './components/MenuToggle';\nimport TransactionalServiceName from './components/TransactionalServiceName';\nimport NavTitle from './components/NavTitle';\nimport NavContainer from './components/NavContainer';\n\nconst BaseHeaderLogo: React.FC<OrganisationalLogoProps & NHSLogoNavProps> = (props) => {\n  const { orgName } = useContext<IHeaderContext>(HeaderContext);\n  if (orgName) {\n    return <OrganisationalLogo {...props} />;\n  }\n  return <NHSLogo {...props} />;\n};\n\nconst HeaderContainer: React.FC<HTMLProps<HTMLDivElement>> = ({ className, ...rest }) => (\n  <Container className={classNames('nhsuk-header__container', className)} {...rest} />\n);\n\ninterface HeaderProps extends HTMLProps<HTMLDivElement> {\n  transactional?: boolean;\n  orgName?: string;\n  orgSplit?: string;\n  orgDescriptor?: string;\n  serviceName?: string;\n  white?: boolean;\n}\n\ninterface HeaderState {\n  hasMenuToggle: boolean;\n  hasSearch: boolean;\n  menuOpen: boolean;\n  searchOpen: boolean;\n}\n\nclass Header extends PureComponent<HeaderProps, HeaderState> {\n  static Logo = BaseHeaderLogo;\n\n  static Search = Search;\n\n  static Nav = Nav;\n\n  static NavTitle = NavTitle;\n\n  static NavContainer = NavContainer;\n\n  static NavItemList = NavItemList;\n\n  static NavItem = NavItem;\n\n  static NavMenuClose = NavMenuClose;\n\n  static Container = HeaderContainer;\n\n  static Content = Content;\n\n  static MenuToggle = MenuToggle;\n\n  static ServiceName = TransactionalServiceName;\n\n  static defaultProps = {\n    role: 'banner',\n  };\n\n  constructor(props: HeaderProps) {\n    super(props);\n    this.state = {\n      hasMenuToggle: false,\n      hasSearch: false,\n      menuOpen: false,\n      searchOpen: false,\n    };\n  }\n\n  setMenuToggle = (toggle: boolean): void => {\n    this.setState({ hasMenuToggle: toggle });\n  };\n\n  setSearch = (toggle: boolean): void => {\n    this.setState({ hasSearch: toggle });\n  };\n\n  toggleMenu = (): void => {\n    this.setState((state) => ({ menuOpen: !state.menuOpen }));\n  };\n\n  toggleSearch = (): void => {\n    this.setState((state) => ({ searchOpen: !state.searchOpen }));\n  };\n\n  render(): JSX.Element {\n    const {\n      className,\n      children,\n      transactional,\n      orgName,\n      orgSplit,\n      orgDescriptor,\n      serviceName,\n      white,\n      ...rest\n    } = this.props;\n    const {\n      hasSearch, hasMenuToggle, menuOpen, searchOpen,\n    } = this.state;\n    const contextValue: IHeaderContext = {\n      orgName,\n      orgSplit,\n      orgDescriptor,\n      serviceName,\n      hasSearch,\n      hasMenuToggle,\n      setMenuToggle: this.setMenuToggle,\n      setSearch: this.setSearch,\n      toggleMenu: this.toggleMenu,\n      toggleSearch: this.toggleSearch,\n      menuOpen,\n      searchOpen,\n    };\n    return (\n      <header\n        className={classNames(\n          'nhsuk-header',\n          { 'nhsuk-header--transactional': transactional },\n          { 'nhsuk-header--organisation': orgName },\n          { 'nhsuk-header--white': white },\n          className,\n        )}\n        {...rest}\n      >\n        <HeaderContext.Provider value={contextValue}>{children}</HeaderContext.Provider>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\nimport { Container, Row, Col } from '../layout';\nimport HeadingLevel, { HeadingLevelType } from '../../util/HeadingLevel';\n\ninterface HeroContentProps extends HTMLProps<HTMLDivElement> {\n  hasImage: boolean;\n}\n\nconst HeroContent: React.FC<HeroContentProps> = ({ children, hasImage }) => {\n  if (!children) {\n    return null;\n  }\n  return (\n    <Container className={classNames({ 'nhsuk-hero--border': hasImage })}>\n      <Row>\n        <Col width=\"two-thirds\">\n          {hasImage ? (\n            <div className=\"nhsuk-hero-content\">\n              {children}\n              <span className=\"nhsuk-hero__arrow\" aria-hidden=\"true\" />\n            </div>\n          ) : (\n            <div className=\"nhsuk-hero__wrapper\">{children}</div>\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\ninterface HeroHeadingProps extends HTMLProps<HTMLHeadingElement> {\n  headingLevel: HeadingLevelType;\n}\n\nconst HeroHeading: React.FC<HeroHeadingProps> = ({ className, ...rest }) => (\n  <HeadingLevel className={classNames('nhsuk-u-margin-bottom-3', className)} {...rest} />\n);\nHeroHeading.defaultProps = {\n  headingLevel: 'h1',\n};\n\nconst HeroText: React.FC<HTMLProps<HTMLParagraphElement>> = ({ className, ...rest }) => (\n  <p className={classNames('nhsuk-body-l nhsuk-u-margin-bottom-0', className)} {...rest} />\n);\n\ninterface HeroProps extends HTMLProps<HTMLDivElement> {\n  imageSrc?: string;\n}\n\ninterface Hero extends React.FC<HeroProps> {\n  Heading: React.FC<HTMLProps<HTMLHeadingElement>>;\n  Text: React.FC<HTMLProps<HTMLParagraphElement>>;\n}\n\nconst Hero: Hero = ({\n  className, children, imageSrc, ...rest\n}) => (\n  <section\n    className={classNames(\n      'nhsuk-hero',\n      { 'nhsuk-hero--image': imageSrc },\n      { 'nhsuk-hero--image-description': imageSrc && children },\n      className,\n    )}\n    style={imageSrc ? { backgroundImage: `url('${imageSrc}')` } : undefined}\n    {...rest}\n  >\n    {imageSrc ? (\n      <div className=\"nhsuk-hero__overlay\">\n        <HeroContent hasImage={Boolean(imageSrc)}>{children}</HeroContent>\n      </div>\n    ) : (\n      <HeroContent hasImage={Boolean(imageSrc)}>{children}</HeroContent>\n    )}\n  </section>\n);\n\nHero.Heading = HeroHeading;\nHero.Text = HeroText;\n\nexport default Hero;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\ninterface ImageProps extends HTMLProps<HTMLImageElement> {\n  // Overriding the default crossOrigin the default is crossOrigin: string | undefined\n  // which causes a typescript \"incompatible types\" error.\n  crossOrigin?: 'anonymous' | 'use-credentials' | undefined;\n  caption?: string;\n}\n\nconst Images: React.FC<ImageProps> = ({ className, caption, ...rest }) => (\n  <figure className=\"nhsuk-image\">\n    {/* eslint-disable-next-line jsx-a11y/alt-text */}\n    <img className={classNames('nhsuk-image__img', className)} {...rest} />\n    {caption ? <figcaption className=\"nhsuk-image__caption\">{caption}</figcaption> : null}\n  </figure>\n);\n\nexport default Images;\n","import React, { HTMLProps, MutableRefObject } from 'react';\nimport classNames from 'classnames';\nimport FormGroup from '../../util/FormGroup';\nimport { InputWidth } from '../../util/types/NHSUKTypes';\nimport { FormElementProps } from '../../util/types/FormTypes';\n\ninterface InputProps extends HTMLProps<HTMLInputElement>, FormElementProps {\n  inputRef?: MutableRefObject<HTMLInputElement | null>;\n  width?: InputWidth;\n  disableErrorLine?: boolean;\n}\n\nconst Input: React.FC<InputProps> = (props) => (\n  <FormGroup<InputProps> {...props} inputType=\"input\">\n    {({\n      width, className, error, inputRef, ...rest\n    }) => (\n      <input\n        className={classNames(\n          'nhsuk-input',\n          { [`nhsuk-input--width-${width}`]: width },\n          { 'nhsuk-input--error': error },\n          className,\n        )}\n        ref={inputRef}\n        {...rest}\n      />\n    )}\n  </FormGroup>\n);\n\nInput.defaultProps = {\n  type: 'text',\n};\n\nexport default Input;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\ninterface InsetTextProps extends HTMLProps<HTMLDivElement> {\n  visuallyHiddenText?: string | false;\n}\n\nconst InsetText: React.FC<InsetTextProps> = ({\n  className,\n  children,\n  visuallyHiddenText,\n  ...rest\n}) => (\n  <div className={classNames('nhsuk-inset-text', className)} {...rest}>\n    {visuallyHiddenText ? (\n      <span className=\"nhsuk-u-visually-hidden\">{visuallyHiddenText}</span>\n    ) : null}\n    {children}\n  </div>\n);\n\nInsetText.defaultProps = {\n  visuallyHiddenText: 'Information: ',\n};\n\nexport default InsetText;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\nimport type { AsElementLink } from '../../util/types/LinkTypes';\n\ninterface PanelProps extends HTMLProps<HTMLDivElement> {\n  labelProps?: HTMLProps<HTMLHeadingElement>;\n  backToTop?: boolean;\n  backToTopButtonText?: string;\n  backToTopLink?: string;\n  noResults?: boolean;\n}\n\nconst Panel: React.FC<PanelProps> = ({\n  className,\n  children,\n  noResults,\n  label,\n  labelProps,\n  backToTop,\n  backToTopLink,\n  backToTopButtonText,\n  ...rest\n}) => (\n  <li>\n    <div className={classNames('nhsuk-list-panel', className)} {...rest}>\n      {label ? (\n        <h2 className=\"nhsuk-list-panel__label\" {...labelProps}>\n          {label}\n        </h2>\n      ) : null}\n      {noResults ? (\n        <div\n          className={classNames('nhsuk-list-panel__box', {\n            'nhsuk-list-panel__box--with-label': label,\n          })}\n        >\n          <p className=\"nhsuk-list-panel--results-items__no-results\">{children}</p>\n        </div>\n      ) : (\n        <ul\n          className={classNames('nhsuk-list-panel__list', {\n            'nhsuk-list-panel__list--with-label': label,\n          })}\n        >\n          {children}\n        </ul>\n      )}\n      {backToTop ? (\n        <div className=\"nhsuk-back-to-top\">\n          <a className=\"nhsuk-back-to-top__link\" href={backToTopLink}>\n            <svg\n              className=\"nhsuk-icon nhsuk-icon__arrow-right\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              aria-hidden=\"true\"\n            >\n              <path d=\"M19.6 11.66l-2.73-3A.51.51 0 0 0 16 9v2H5a1 1 0 0 0 0 2h11v2a.5.5 0 0 0 .32.46.39.39 0 0 0 .18 0 .52.52 0 0 0 .37-.16l2.73-3a.5.5 0 0 0 0-.64z\" />\n            </svg>\n            {backToTopButtonText || 'Back to top'}\n          </a>\n        </div>\n      ) : null}\n    </div>\n  </li>\n);\n\nconst PanelItem: React.FC<HTMLProps<HTMLLIElement>> = ({ className, ...rest }) => (\n  <li className={classNames('nhsuk-list-panel__item', className)} {...rest} />\n);\n\nconst PanelLinkItem: React.FC<AsElementLink<HTMLAnchorElement>> = ({ className, asElement: Component = 'a', ...rest }) => (\n  <PanelItem>\n    <Component className={classNames('nhsuk-list-panel__link', className)} {...rest} />\n  </PanelItem>\n);\n\ninterface ListPanelProps extends HTMLProps<HTMLOListElement> {\n  type?: 'a' | 'i' | '1' | 'A' | 'I' | undefined;\n}\n\ninterface ListPanel extends React.FC<ListPanelProps> {\n  LinkItem: React.FC<HTMLProps<HTMLAnchorElement>>;\n  Item: React.FC<HTMLProps<HTMLLIElement>>;\n  Panel: React.FC<PanelProps>;\n}\n\nconst ListPanel: ListPanel = ({ className, children, ...rest }) => (\n  <ol className={classNames('nhsuk-list', className)} {...rest}>\n    {children}\n  </ol>\n);\n\nListPanel.LinkItem = PanelLinkItem;\nListPanel.Item = PanelItem;\nListPanel.Panel = Panel;\n\nexport default ListPanel;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\nimport type { AsElementLink } from '../../util/types/LinkTypes';\n\nconst alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nconst processLetters = (\n  children: React.ReactNode,\n  fullAlphabet: boolean | undefined,\n  removedLetters: Array<string> | undefined,\n  disabledLetters: Array<string> | undefined,\n  letters: Array<string> | undefined,\n) => {\n  const letterMap = (letter: string) => {\n    if (removedLetters && removedLetters.includes(letter)) {\n      return null;\n    }\n    if (disabledLetters && disabledLetters.includes(letter)) {\n      return <DisabledItem key={letter}>{letter}</DisabledItem>;\n    }\n    return (\n      <LinkItem key={letter} href={`#${letter}`}>\n        {letter}\n      </LinkItem>\n    );\n  };\n  if (children) {\n    return children;\n  }\n  if (fullAlphabet) {\n    return alphabet.split('').map(letterMap);\n  }\n  if (letters) {\n    return letters.map(letterMap);\n  }\n  return null;\n};\n\ninterface NavAZProps extends HTMLProps<HTMLDivElement> {\n  fullAlphabet?: boolean;\n  removedLetters?: Array<string>;\n  disabledLetters?: Array<string>;\n  letters?: Array<string>;\n}\n\ninterface NavAZ extends React.FC<NavAZProps> {\n  LinkItem: React.FC<AsElementLink<HTMLAnchorElement>>;\n  DisabledItem: React.FC<HTMLProps<HTMLSpanElement>>;\n}\n\nconst NavAZ: NavAZ = ({\n  className,\n  children,\n  fullAlphabet,\n  removedLetters,\n  disabledLetters,\n  letters,\n  ...rest\n}) => (\n  <nav className={classNames('nhsuk-nav-a-z', className)} {...rest}>\n    <ol className=\"nhsuk-nav-a-z__list\">\n      {processLetters(children, fullAlphabet, removedLetters, disabledLetters, letters)}\n    </ol>\n  </nav>\n);\n\nconst LinkItem: React.FC<AsElementLink<HTMLAnchorElement>> = ({\n  className,\n  asElement: Component = 'a',\n  ...rest\n}) => (\n  <li className=\"nhsuk-nav-a-z__item\">\n    <Component className={classNames('nhsuk-nav-a-z__link', className)} {...rest} />\n  </li>\n);\n\nconst DisabledItem: React.FC<HTMLProps<HTMLSpanElement>> = ({ className, ...rest }) => (\n  <li className=\"nhsuk-nav-a-z__item\">\n    <span className={classNames('nhsuk-nav-a-z__link--disabled', className)} {...rest} />\n  </li>\n);\n\nNavAZ.LinkItem = LinkItem;\nNavAZ.DisabledItem = DisabledItem;\n\nexport default NavAZ;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\nimport { ArrowLeft, ArrowRight } from '../icons';\n\ninterface PaginationLinkProps extends HTMLProps<HTMLAnchorElement> {\n  previous?: boolean;\n  next?: boolean;\n}\n\nconst PaginationLink: React.FC<PaginationLinkProps> = ({\n  className,\n  children,\n  previous,\n  next,\n  ...rest\n}) => (\n  <li\n    className={classNames(\n      { 'nhsuk-pagination-item--previous': previous },\n      { 'nhsuk-pagination-item--next': next },\n    )}\n  >\n    <a\n      className={classNames(\n        'nhsuk-pagination__link',\n        { 'nhsuk-pagination__link--prev': previous },\n        { 'nhsuk-pagination__link--next': next },\n        className,\n      )}\n      {...rest}\n    >\n      <span className=\"nhsuk-pagination__title\">\n        {previous ? 'Previous' : null}\n        {next ? 'Next' : null}\n      </span>\n      <span className=\"nhsuk-u-visually-hidden\">:</span>\n      <span className=\"nhsuk-pagination__page\">{children}</span>\n      {previous ? <ArrowLeft /> : null}\n      {next ? <ArrowRight /> : null}\n    </a>\n  </li>\n);\n\ninterface Pagination extends React.FC<HTMLProps<HTMLDivElement>> {\n  Link: React.FC<PaginationLinkProps>;\n}\n\nconst Pagination: Pagination = ({ className, children, ...rest }) => (\n  <nav className={classNames('nhsuk-pagination', className)} {...rest}>\n    <ul className=\"nhsuk-list nhsuk-pagination__list\">{children}</ul>\n  </nav>\n);\n\nPagination.defaultProps = {\n  role: 'navigation',\n  'aria-label': 'Pagination',\n};\n\nPagination.Link = PaginationLink;\n\nexport default Pagination;\n","import { createContext } from 'react';\n\nexport type IRadiosContext = {\n  name: string;\n  selectedRadio: string;\n  getRadioId: (reference: string) => string;\n  setConditional: (radioRef: string, hasConditional: boolean) => void;\n  setSelected: (radioRef: string) => void;\n  leaseReference: () => string;\n  unleaseReference: (reference: string) => void;\n};\n\nexport const RadiosContext = createContext<IRadiosContext>({\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  name: '',\n  selectedRadio: '',\n  getRadioId: () => '',\n  setConditional: () => {},\n  setSelected: () => {},\n  leaseReference: () => '',\n  unleaseReference: () => {},\n});\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nconst Divider: React.FC<HTMLProps<HTMLDivElement>> = ({ className, ...rest }) => (\n  <div className={classNames('nhsuk-radios__divider', className)} {...rest} />\n);\n\nexport default Divider;\n","import React, {\n  HTMLProps, useContext, ReactNode, useEffect, useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { RadiosContext, IRadiosContext } from '../RadioContext';\nimport Hint, { HintProps } from '../../hint/Hint';\nimport Label, { LabelProps } from '../../label/Label';\n\nexport interface RadioProps extends HTMLProps<HTMLInputElement> {\n  hint?: string;\n  hintProps?: HintProps;\n  labelProps?: LabelProps;\n  conditional?: ReactNode;\n  forceShowConditional?: boolean;\n  conditionalWrapperProps?: HTMLProps<HTMLDivElement>;\n  inputRef?: (inputRef: HTMLInputElement | null) => void;\n}\n\nconst Radio: React.FC<RadioProps> = ({\n  className,\n  children,\n  id,\n  hint,\n  hintProps,\n  labelProps,\n  conditional,\n  forceShowConditional,\n  conditionalWrapperProps,\n  checked,\n  defaultChecked,\n  onChange,\n  inputRef,\n  ...rest\n}) => {\n  const {\n    name,\n    getRadioId,\n    setConditional,\n    setSelected,\n    selectedRadio,\n    leaseReference,\n    unleaseReference,\n  } = useContext<IRadiosContext>(RadiosContext);\n  const [radioReference] = useState<string>(leaseReference());\n  const inputID = id || getRadioId(radioReference);\n  const shouldShowConditional = selectedRadio === radioReference && checked !== false;\n\n  useEffect(() => () => unleaseReference(radioReference));\n\n  useEffect(() => {\n    if (defaultChecked) setSelected(radioReference);\n  }, []);\n\n  useEffect(() => {\n    if (checked) setSelected(radioReference);\n  }, [checked]);\n\n  useEffect(() => {\n    setConditional(radioReference, Boolean(conditional));\n    return () => setConditional(radioReference, false);\n  }, [conditional]);\n\n  return (\n    <>\n      <div className=\"nhsuk-radios__item\">\n        <input\n          onChange={(e) => {\n            setSelected(radioReference);\n            if (onChange) onChange(e);\n          }}\n          className={classNames('nhsuk-radios__input', className)}\n          id={inputID}\n          name={name}\n          aria-labelledby={children ? `${inputID}--label` : undefined}\n          aria-describedby={hint ? `${inputID}--hint` : undefined}\n          checked={checked}\n          defaultChecked={defaultChecked}\n          ref={inputRef}\n          {...rest}\n        />\n        {children ? (\n          <Label\n            className=\"nhsuk-radios__label\"\n            id={`${inputID}--label`}\n            htmlFor={inputID}\n            {...labelProps}\n          >\n            {children}\n          </Label>\n        ) : null}\n        {hint ? (\n          <Hint className=\"nhsuk-radios__hint\" id={`${inputID}--hint`} {...hintProps}>\n            {hint}\n          </Hint>\n        ) : null}\n      </div>\n      {conditional && (shouldShowConditional || forceShowConditional) ? (\n        <div\n          className=\"nhsuk-radios__conditional\"\n          id={`${inputID}--conditional`}\n          {...conditionalWrapperProps}\n        >\n          {conditional}\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nRadio.defaultProps = {\n  type: 'radio',\n};\n\nexport default Radio;\n","import React, { HTMLProps, PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { FormElementProps } from '../../util/types/FormTypes';\nimport { RadiosContext, IRadiosContext } from './RadioContext';\nimport FormGroup from '../../util/FormGroup';\nimport Divider from './components/Divider';\nimport Radio from './components/Radio';\nimport { generateRandomName } from '../../util/RandomID';\n\ninterface RadiosProps extends HTMLProps<HTMLDivElement>, FormElementProps {\n  inline?: boolean;\n  idPrefix?: string;\n}\n\ntype RadiosState = {\n  conditionalRadios: Array<string>;\n  selectedRadio: string;\n};\n\nclass Radios extends PureComponent<RadiosProps, RadiosState> {\n  private radioCount = 0;\n\n  private radioReferences: Array<string> = [];\n\n  private radioIds: Record<string, string> = {};\n\n  static Divider = Divider;\n\n  static Radio = Radio;\n\n\n  constructor(props: RadiosProps) {\n    super(props);\n    this.state = {\n      conditionalRadios: [],\n      selectedRadio: '',\n    };\n  }\n\n  getRadioId = (id: string, reference: string): string => {\n    const { idPrefix } = this.props;\n    if (reference in this.radioIds) {\n      return this.radioIds[reference];\n    }\n    this.radioCount += 1;\n    this.radioIds[reference] = `${idPrefix || id}-${this.radioCount}`;\n    return this.radioIds[reference];\n  };\n\n  leaseReference = (): string => {\n    const reference = generateRandomName();\n    if (this.radioReferences.includes(reference)) {\n      return this.leaseReference();\n    }\n    this.radioReferences.push(reference);\n    return reference;\n  };\n\n  unleaseReference = (reference: string): void => {\n    this.radioReferences = this.radioReferences.filter((ref) => ref !== reference);\n  };\n\n  setConditional = (radioReference: string, hasConditional: boolean): void => {\n    this.setState((state) => {\n      const currentHasConditional = state.conditionalRadios.includes(radioReference);\n      if (currentHasConditional && hasConditional === false) {\n        return {\n          ...state,\n          conditionalRadios: state.conditionalRadios.filter((ref) => ref !== radioReference),\n        };\n      }\n      if (!currentHasConditional && hasConditional === true) {\n        return {\n          ...state,\n          conditionalRadios: [...state.conditionalRadios, radioReference],\n        };\n      }\n      return state;\n    });\n  };\n\n  setSelected = (radioReference: string): void => {\n    this.setState({\n      selectedRadio: radioReference,\n    });\n  };\n\n  resetRadioIds = (): void => {\n    this.radioCount = 0;\n    this.radioIds = {};\n  };\n\n  render(): JSX.Element {\n    const { children, ...rest } = this.props;\n    return (\n      <FormGroup<RadiosProps> inputType=\"radios\" {...rest}>\n        {/* eslint-disable-next-line @typescript-eslint/no-unused-vars */}\n        {({ className, inline, name, id, error, ...restRenderProps }) => {\n          this.resetRadioIds();\n          const contextValue: IRadiosContext = {\n            getRadioId: (reference) => this.getRadioId(id, reference),\n            selectedRadio: this.state.selectedRadio,\n            setConditional: this.setConditional,\n            setSelected: this.setSelected,\n            leaseReference: this.leaseReference,\n            unleaseReference: this.unleaseReference,\n            name,\n          };\n          const containsConditional = this.state.conditionalRadios.length > 0;\n          return (\n            <div\n              className={classNames(\n                'nhsuk-radios',\n                { 'nhsuk-radios--inline': inline },\n                { 'nhsuk-radios--conditional': containsConditional },\n                className,\n              )}\n              id={id}\n              {...restRenderProps}\n            >\n              <RadiosContext.Provider value={contextValue}>{children}</RadiosContext.Provider>\n            </div>\n          );\n        }}\n      </FormGroup>\n    );\n  }\n}\n\nexport default Radios;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\ninterface ReviewDateProps extends HTMLProps<HTMLDivElement> {\n  lastReviewed?: string;\n  nextReview?: string;\n}\n\nconst ReviewDate: React.FC<ReviewDateProps> = ({\n  className,\n  lastReviewed,\n  nextReview,\n  ...rest\n}) => (\n  <div className={classNames('nhsuk-review-date', className)} {...rest}>\n    <p className=\"nhsuk-body-s\">\n      {lastReviewed ? `Page last reviewed: ${lastReviewed}` : null}\n      {lastReviewed && nextReview ? <br /> : null}\n      {nextReview ? `Next review due: ${nextReview}` : null}\n    </p>\n  </div>\n);\n\nexport default ReviewDate;\n","import React, { HTMLProps, MutableRefObject } from 'react';\n\nimport classNames from 'classnames';\nimport { FormElementProps } from '../../util/types/FormTypes';\nimport FormGroup from '../../util/FormGroup';\n\n//  SelectProps = HTMLProps<HTMLSelectElement> & FormElementProps;\ninterface ISelectProps extends HTMLProps<HTMLSelectElement>, FormElementProps {\n  selectRef?: MutableRefObject<HTMLSelectElement | null>;\n}\n\ninterface ISelect extends React.FC<ISelectProps> {\n  Option: React.FC<HTMLProps<HTMLOptionElement>>;\n}\n\nconst Select: ISelect = ({ children, ...rest }) => (\n  <FormGroup<ISelectProps> inputType=\"select\" {...rest}>\n    {({\n      className, error, selectRef, ...restRenderProps\n    }) => (\n      <select\n        className={classNames('nhsuk-select', { 'nhsuk-select--error': error }, className)}\n        ref={selectRef}\n        {...restRenderProps}\n      >\n        {children}\n      </select>\n    )}\n  </FormGroup>\n);\n\nconst Option: React.FC<HTMLProps<HTMLOptionElement>> = (props) => <option {...props} />;\n\nSelect.Option = Option;\n\nexport default Select;\n","import React, { HTMLProps, MouseEvent } from 'react';\nimport classNames from 'classnames';\n\ninterface SkipLinkProps extends HTMLProps<HTMLAnchorElement> {\n  focusTargetRef?: React.RefObject<HTMLElement>;\n  disableDefaultBehaviour?: boolean;\n}\n\ninterface SkipLink extends React.Component<SkipLinkProps> {\n  firstHeadingElement: HTMLElement | null;\n}\n\nclass SkipLink extends React.Component<SkipLinkProps> {\n  static defaultProps = {\n    children: 'Skip to main content',\n    href: '#maincontent',\n    tabIndex: 0,\n  };\n\n  constructor(props: SkipLinkProps) {\n    super(props);\n    this.firstHeadingElement = null;\n  }\n\n  componentDidMount(): void {\n    // The standard NHSUK Frontend behaviour is to listen on the\n    // blur event on the first heading element.\n    this.firstHeadingElement = this.getFirstHeadingElement();\n    if (this.firstHeadingElement) {\n      this.firstHeadingElement.addEventListener('blur', this.handleHeadingBlur);\n    }\n  }\n\n  componentWillUnmount(): void {\n    if (this.firstHeadingElement) {\n      this.firstHeadingElement.removeEventListener('blur', this.handleHeadingBlur);\n    }\n  }\n\n  private handleHeadingBlur = (event: Event) => {\n    event.preventDefault();\n    if (this.firstHeadingElement) {\n      this.unfocusElement(this.firstHeadingElement);\n    }\n  };\n\n  private getFirstHeadingElement = (): HTMLElement | null => {\n    const allHeadings = document.getElementsByTagName('h1');\n    if (allHeadings.length > 0) {\n      return allHeadings[0];\n    }\n    return null;\n  };\n\n  private focusElement = (element: HTMLElement): void => {\n    // Sometimes custom focus code can cause a loop of focus events\n    // (especially in IE11), so check for attributes before performing\n    // focus actions and DOM manipulation.\n    if (!element.hasAttribute('tabIndex')) {\n      element.setAttribute('tabIndex', '-1');\n    }\n    if (document.activeElement !== element) {\n      element.focus();\n    }\n  };\n\n  private unfocusElement = (element: HTMLElement): void => {\n    if (element.hasAttribute('tabIndex')) element.removeAttribute('tabIndex');\n  };\n\n  private onClick = (event: MouseEvent<HTMLAnchorElement>): void => {\n    const { onClick, focusTargetRef, disableDefaultBehaviour } = this.props;\n    if (disableDefaultBehaviour) event.preventDefault();\n    if (focusTargetRef && focusTargetRef.current) {\n      this.focusElement(focusTargetRef.current);\n    } else if (!disableDefaultBehaviour) {\n      // Follow the default NHSUK Frontend behaviour, but go about it in a safer way.\n      // https://github.com/nhsuk/nhsuk-frontend/blob/master/packages/components/skip-link/skip-link.js\n      if (this.firstHeadingElement) this.focusElement(this.firstHeadingElement);\n    }\n    if (onClick) {\n      event.persist();\n      onClick(event);\n    }\n  };\n\n  render(): JSX.Element {\n    const {\n      className,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      focusTargetRef,\n      disableDefaultBehaviour,\n      href,\n      ...rest\n    } = this.props;\n    return (\n      <a\n        className={classNames('nhsuk-skip-link', className)}\n        onClick={this.onClick}\n        href={disableDefaultBehaviour ? undefined : href}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport default SkipLink;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nconst SummaryListRow: React.FC<HTMLProps<HTMLDivElement>> = ({ className, ...rest }) => (\n  <div className={classNames('nhsuk-summary-list__row', className)} {...rest} />\n);\n\nconst SummaryListKey: React.FC<HTMLProps<HTMLDListElement>> = ({ className, ...rest }) => (\n  <dt className={classNames('nhsuk-summary-list__key', className)} {...rest} />\n);\n\nconst SummaryListValue: React.FC<HTMLProps<HTMLDListElement>> = ({ className, ...rest }) => (\n  <dd className={classNames('nhsuk-summary-list__value', className)} {...rest} />\n);\n\nconst SummaryListActions: React.FC<HTMLProps<HTMLDListElement>> = ({ className, ...rest }) => (\n  <dd className={classNames('nhsuk-summary-list__actions', className)} {...rest} />\n);\n\ninterface SummaryListProps extends HTMLProps<HTMLDListElement> {\n  noBorder?: boolean;\n}\n\ninterface SummaryList extends React.FC<SummaryListProps> {\n  Row: React.FC<HTMLProps<HTMLDivElement>>;\n  Key: React.FC<HTMLProps<HTMLDListElement>>;\n  Value: React.FC<HTMLProps<HTMLDListElement>>;\n  Actions: React.FC<HTMLProps<HTMLDListElement>>;\n}\n\nconst SummaryList: SummaryList = ({ className, noBorder, ...rest }) => (\n  <dl\n    className={classNames(\n      'nhsuk-summary-list',\n      { 'nhsuk-summary-list--no-border': noBorder },\n      className,\n    )}\n    {...rest}\n  />\n);\n\nSummaryList.Row = SummaryListRow;\nSummaryList.Key = SummaryListKey;\nSummaryList.Value = SummaryListValue;\nSummaryList.Actions = SummaryListActions;\n\nexport default SummaryList;\n","import { createContext } from 'react';\n\nexport enum TableSection {\n  NONE,\n  HEAD,\n  BODY,\n}\n\nconst TableSectionContext = createContext<TableSection>(TableSection.NONE);\n\nexport default TableSectionContext;\n","import classNames from 'classnames';\nimport React, { HTMLProps } from 'react';\nimport TableSectionContext, { TableSection } from '../TableSectionContext';\n\nconst TableBody: React.FC<HTMLProps<HTMLTableSectionElement>> = ({\n  className,\n  children,\n  ...rest\n}) => (\n  <tbody className={classNames('nhsuk-table__body', className)} {...rest}>\n    <TableSectionContext.Provider value={TableSection.BODY}>\n      {children}\n    </TableSectionContext.Provider>\n  </tbody>\n);\nTableBody.displayName = 'Table.Body';\n\nexport default TableBody;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nconst TableCaption: React.FC<HTMLProps<HTMLTableCaptionElement>> = ({ className, ...rest }) => (\n  <caption className={classNames('nhsuk-table__caption', className)} {...rest} />\n);\nTableCaption.displayName = 'Table.Caption';\n\nexport default TableCaption;\n","import classNames from 'classnames';\nimport React, { HTMLProps, useContext } from 'react';\nimport useDevWarning from '../../../util/hooks/UseDevWarning';\nimport TableSectionContext, { TableSection } from '../TableSectionContext';\n\nconst CellOutsideOfSectionWarning =\n  'Table.Cell used outside of a Table.Head or Table.Body component. Unable to determine section type from context.';\n\nexport interface TableCellProps extends HTMLProps<HTMLTableCellElement> {\n  _responsive?: boolean;\n  _responsiveHeading?: string;\n  isNumeric?: boolean;\n}\n\nconst TableCell: React.FC<TableCellProps> = ({\n  className,\n  _responsive,\n  _responsiveHeading,\n  isNumeric,\n  children,\n  ...rest\n}) => {\n  const section = useContext(TableSectionContext);\n  useDevWarning(CellOutsideOfSectionWarning, () => section === TableSection.NONE);\n\n  const cellClass = section === TableSection.HEAD ? 'nhsuk-table__header' : 'nhsuk-table__cell';\n  const classes = classNames(cellClass, { [`${cellClass}--numeric`]: isNumeric }, className);\n\n  switch (section) {\n    case TableSection.HEAD:\n      return (\n        <th className={classes} scope=\"col\" {...rest}>\n          {children}\n        </th>\n      );\n\n    case TableSection.BODY:\n    case TableSection.NONE:\n    default:\n      return (\n        <td\n          className={classes}\n          role={_responsive ? 'cell' : undefined}\n          {...rest}\n        >\n          {_responsive && (\n            <span className=\"nhsuk-table-responsive__heading\">{_responsiveHeading}</span>\n          )}\n          {children}\n        </td>\n      );\n  }\n};\n\nTableCell.displayName = 'Table.Cell';\nTableCell.defaultProps = {\n  _responsive: false,\n  _responsiveHeading: '',\n};\n\nexport default TableCell;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nconst TableContainer: React.FC<HTMLProps<HTMLDivElement>> = ({ className, ...rest }) => (\n  <div className={classNames('nhsuk-table-container', className)} {...rest} />\n);\nTableContainer.displayName = 'Table.Container';\n\nexport default TableContainer;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\nimport TableSectionContext, { TableSection } from '../TableSectionContext';\n\nconst TableHead: React.FC<HTMLProps<HTMLTableSectionElement>> = ({\n  className,\n  children,\n  ...rest\n}) => (\n  <thead className={classNames('nhsuk-table__head', className)} {...rest}>\n    <TableSectionContext.Provider value={TableSection.HEAD}>\n      {children}\n    </TableSectionContext.Provider>\n  </thead>\n);\n\nTableHead.displayName = 'Table.Head';\n\nexport default TableHead;\n","import { createContext } from 'react';\n\nexport interface ITableContext {\n  isResponsive: boolean;\n  headings: string[];\n  setHeadings(headings: string[]): void;\n}\n\nconst TableContext = createContext<ITableContext>({\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  isResponsive: false,\n  headings: [],\n  setHeadings: () => {},\n});\n\nexport default TableContext;\n","import React, { isValidElement, ReactElement, ReactNode } from 'react';\nimport TableCell from './components/TableCell';\n\nexport const isTableCell = (child: ReactNode): child is ReactElement => {\n  return isValidElement(child) && child.type === TableCell;\n};\n\nexport const getHeadingsFromChildren = (children: ReactNode): string[] => {\n  return React.Children\n    .map(children, child => {\n      if (isTableCell(child)) {\n        return child.props.children.toString();\n      }\n      return null;\n    })\n    .filter(Boolean);\n};\n","import classNames from 'classnames';\nimport React, { HTMLProps, useContext, useEffect } from 'react';\nimport TableContext from '../TableContext';\nimport { getHeadingsFromChildren, isTableCell } from '../TableHelpers';\nimport TableSectionContext, { TableSection } from '../TableSectionContext';\n\nconst TableRow: React.FC<HTMLProps<HTMLTableRowElement>> = ({ className, children, ...rest }) => {\n  const section = useContext(TableSectionContext);\n  const { isResponsive, headings, setHeadings } = useContext(TableContext);\n\n  useEffect(() => {\n    if (isResponsive && section === TableSection.HEAD) {\n      setHeadings(getHeadingsFromChildren(children));\n    }\n  }, [isResponsive, section, children]);\n\n  if (isResponsive && section === TableSection.BODY) {\n    const tableCells = React.Children.map(children, (child, index) => {\n      if (isTableCell(child)) {\n        return React.cloneElement(child, {\n          _responsive: isResponsive,\n          _responsiveHeading: `${headings[index] || ''} `,\n        });\n      }\n      return child;\n    });\n\n    return (\n      <tr className={classNames('nhsuk-table__row', className)} {...rest}>\n        {tableCells}\n      </tr>\n    );\n  }\n\n  return (\n    <tr className={classNames('nhsuk-table__row', className)} {...rest}>\n      {children}\n    </tr>\n  );\n};\nTableRow.displayName = 'Table.Row';\n\nexport default TableRow;\n","import React, { ComponentProps, HTMLProps } from 'react';\nimport classNames from 'classnames';\nimport HeadingLevel from '../../../util/HeadingLevel';\n\nexport interface TablePanelProps extends HTMLProps<HTMLDivElement> {\n  heading?: string;\n  headingProps?: ComponentProps<typeof HeadingLevel>;\n}\n\nconst TablePanel: React.FC<TablePanelProps> = ({\n  className,\n  heading,\n  headingProps,\n  children,\n  ...rest\n}) => (\n  <div className={classNames('nhsuk-table__panel-with-heading-tab', className)} {...rest}>\n    {heading && (\n      <HeadingLevel\n        headingLevel=\"h3\"\n        {...headingProps}\n        className={classNames('nhsuk-table__heading-tab', headingProps?.className)}\n      >\n        {heading}\n      </HeadingLevel>\n    )}\n    {children}\n  </div>\n);\n\nexport default TablePanel;\n","import React, { ComponentProps, HTMLProps, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport TableBody from './components/TableBody';\nimport TableCaption from './components/TableCaption';\nimport TableCell from './components/TableCell';\nimport TableContainer from './components/TableContainer';\nimport TableHead from './components/TableHead';\nimport TableRow from './components/TableRow';\nimport TablePanel from './components/TablePanel';\nimport TableContext, { ITableContext } from './TableContext';\n\ninterface TableProps extends HTMLProps<HTMLTableElement> {\n  responsive?: boolean;\n  caption?: ReactNode;\n  captionProps?: ComponentProps<typeof TableCaption>;\n}\n\ninterface TableState {\n  headings: string[];\n}\n\nclass Table extends React.PureComponent<TableProps, TableState> {\n  static defaultProps = {\n    responsive: false,\n  };\n\n  static Container = TableContainer;\n\n  static Head = TableHead;\n\n  static Row = TableRow;\n\n  static Cell = TableCell;\n\n  static Body = TableBody;\n\n  static Panel = TablePanel;\n\n  constructor(props: TableProps) {\n    super(props);\n    this.state = {\n      headings: [],\n    };\n  }\n\n  setHeadings = (headings: string[]): void => {\n    const isEqual = headings.reduce(\n      (prevValue, heading, index) => prevValue && heading === this.state.headings[index],\n      true,\n    );\n\n    if (!isEqual) this.setState({ headings });\n  };\n\n  render(): JSX.Element {\n    const { className, responsive, children, caption, captionProps, ...rest } = this.props;\n\n    const contextValue: ITableContext = {\n      isResponsive: Boolean(responsive),\n      headings: this.state.headings,\n      setHeadings: this.setHeadings,\n    };\n\n    return (\n      <TableContext.Provider value={contextValue}>\n        <table\n          className={classNames(\n            { 'nhsuk-table': !responsive },\n            { 'nhsuk-table-responsive': responsive },\n            className,\n          )}\n          {...rest}\n        >\n          {caption && <TableCaption {...captionProps}>{caption}</TableCaption>}\n          {children}\n        </table>\n      </TableContext.Provider>\n    );\n  }\n}\n\nexport default Table;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\ninterface TagProps extends HTMLProps<HTMLSpanElement> {\n  color?:\n  | 'white'\n  | 'grey'\n  | 'green'\n  | 'aqua-green'\n  | 'blue'\n  | 'purple'\n  | 'pink'\n  | 'red'\n  | 'orange'\n  | 'yellow';\n}\n\nconst Tag: React.FC<TagProps> = ({ className, color, ...rest }) => (\n  <strong\n    className={classNames('nhsuk-tag', { [`nhsuk-tag--${color}`]: color }, className)}\n    {...rest}\n  />\n);\n\nexport default Tag;\n","import React, { HTMLProps, MutableRefObject } from 'react';\nimport classNames from 'classnames';\nimport { FormElementProps } from '../../util/types/FormTypes';\nimport FormGroup from '../../util/FormGroup';\n\ntype TextareaProps = HTMLProps<HTMLTextAreaElement> &\n  FormElementProps & { textareaRef?: MutableRefObject<HTMLTextAreaElement | null> };\n\nconst Textarea: React.FC<TextareaProps> = (props) => (\n  <FormGroup<TextareaProps> inputType=\"textarea\" {...props}>\n    {({ className, error, textareaRef, ...rest }) => (\n      <textarea\n        className={classNames('nhsuk-textarea', { 'nhsuk-textarea--error': error }, className)}\n        ref={textareaRef}\n        {...rest}\n      />\n    )}\n  </FormGroup>\n);\n\nexport default Textarea;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nconst LedeText: React.FC<HTMLProps<HTMLParagraphElement>> = ({ className, ...rest }) => (\n  <p className={classNames('nhsuk-lede-text', className)} {...rest} />\n);\n\nexport default LedeText;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nconst BodyText: React.FC<HTMLProps<HTMLParagraphElement>> = ({ className, ...rest }) => (\n  <p className={classNames('nhsuk-body', className)} {...rest} />\n);\n\nexport default BodyText;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\nimport HeadingLevel, { HeadingLevelType } from '../../util/HeadingLevel';\n\ninterface WarningCalloutLabelProps extends HTMLProps<HTMLHeadingElement> {\n  headingLevel?: HeadingLevelType;\n  visuallyHiddenText?: string | false;\n}\n\nconst WarningCalloutLabel: React.FC<WarningCalloutLabelProps> = ({\n  className,\n  visuallyHiddenText,\n  children,\n  ...rest\n}) => (\n  <HeadingLevel className={classNames('nhsuk-warning-callout__label', className)} {...rest}>\n    {/* eslint-disable-next-line jsx-a11y/aria-role */}\n    <span role=\"text\">\n      {visuallyHiddenText && <span className=\"nhsuk-u-visually-hidden\">{visuallyHiddenText}</span>}\n      {children}\n    </span>\n  </HeadingLevel>\n);\n\nWarningCalloutLabel.defaultProps = {\n  visuallyHiddenText: 'Important: ',\n};\n\ninterface IWarningCallout extends React.FC<HTMLProps<HTMLDivElement>> {\n  Label: typeof WarningCalloutLabel;\n}\n\nconst WarningCallout: IWarningCallout = ({ className, ...rest }) => (\n  <div className={classNames('nhsuk-warning-callout', className)} {...rest} />\n);\n\nWarningCallout.Label = WarningCalloutLabel;\n\nexport default WarningCallout;\n","import React, { HTMLProps } from 'react';\n\nconst Clearfix: React.FC<HTMLProps<HTMLDivElement>> = (props) => (\n  <div className=\"nhsuk-u-clear\" {...props} />\n);\n\nexport default Clearfix;\n","import React, { HTMLProps } from 'react';\nimport classNames from 'classnames';\n\nconst ReadingWidth: React.FC<HTMLProps<HTMLDivElement>> = ({ className, ...rest }) => (\n  <div className={classNames('nhsuk-u-reading-width', className)} {...rest} />\n);\n\nexport default ReadingWidth;\n"],"names":["BaseIconSVG","className","children","height","width","iconType","rest","jsx","classNames","ArrowLeft","props","ArrowRight","ArrowRightCircle","jsxs","ChevronLeft","ChevronRight","Close","Cross","SmallEmdash","Emdash","Minus","Plus","Search","Tick","ActionLink","Component","BackLink","Item","Back","Breadcrumb","ItemChildren","OtherChildren","React","prev","child","Container","Button","disabled","secondary","reverse","ButtonLink","role","draggable","ButtonWrapper","href","as","CardContext","CardContent","feature","useContext","CardDescription","CardImage","alt","CardLink","CardHeading","HeadingLevel","CardGroup","Row","CardGroupItem","Col","Card","clickable","CareCardContext","createContext","genHiddenText","cardType","CareCardContent","CareCardHeading","visuallyHiddenText","headingLevel","CareCard","type","Hint","ErrorMessage","getRandomString","length","generateRandomName","prefix","randomString","generateRandomID","BaseLabel","bold","size","isPageHeading","Label","FieldsetContext","FormContext","useFormContext","Form","disableErrorFromComponents","FormGroup","hint","label","id","labelProps","error","hintProps","errorProps","formGroupProps","inputType","disableErrorLine","name","generatedID","useState","isFieldset","registerComponent","passError","elementID","labelID","errorID","hintID","childProps","useEffect","formGroupClassName","formGroupRestProps","CheckboxContext","Box","conditional","defaultChecked","checked","onChange","inputRef","forceShowConditional","conditionalWrapperProps","getBoxId","setConditional","unleaseReference","leaseReference","boxReference","showConditional","setShowConditional","inputID","labelClassName","restLabelProps","hintClassName","restHintProps","conditionalClassName","restConditionalProps","Fragment","e","Checkboxes","PureComponent","reference","ref","hasConditional","state","currentHasConditional","idPrefix","restRenderProps","containsConditional","contextValue","ContentsListItem","current","ContentsList","DateInputContext","labels","IndividualDateInput","value","defaultValue","ctxId","ctxName","ctxError","ctxValue","ctxDefaultValue","ctxHandleChange","registerRef","inputName","inputValue","inputDefaultValue","handleChange","refCallback","DayInput","MonthInput","YearInput","_DateInput","event","newEventValue","newEvent","_a","_b","_c","prevProps","newState","day","month","year","autoSelectNext","DateInput","Details","expander","DetailsSummary","DetailsText","ExpanderGroup","DoDontListContext","DoDontList","listType","heading","DoDontItem","listItemType","listItem","ErrorSummaryTitle","ErrorSummaryBody","ErrorSummaryList","ErrorSummaryListItem","ErrorSummary","Legend","Fieldset","componentId","existingError","deregister","containsFormElements","containsError","FooterList","columns","FooterListItem","FooterCopyright","Footer","HeaderContext","SVGImageWithSrc","NHSLogo","serviceName","hasMenuToggle","hasSearch","OrganisationalLogo","logoUrl","orgName","orgSplit","orgDescriptor","action","method","setSearch","toggleSearch","searchOpen","SearchIcon","CloseIcon","Nav","open","menuOpen","toggleMenu","NavItem","mobileOnly","ChevronRightIcon","NavItemList","NavMenuClose","Content","MenuToggle","onClick","setMenuToggle","onToggleClick","TransactionalServiceName","long","NavTitle","NavContainer","BaseHeaderLogo","HeaderContainer","Header","toggle","transactional","white","HeroContent","hasImage","HeroHeading","HeroText","Hero","imageSrc","Images","caption","Input","InsetText","Panel","noResults","backToTop","backToTopLink","backToTopButtonText","PanelItem","PanelLinkItem","ListPanel","alphabet","processLetters","fullAlphabet","removedLetters","disabledLetters","letters","letterMap","letter","DisabledItem","LinkItem","NavAZ","PaginationLink","previous","next","Pagination","RadiosContext","Divider","Radio","getRadioId","setSelected","selectedRadio","radioReference","shouldShowConditional","Radios","inline","ReviewDate","lastReviewed","nextReview","Select","selectRef","Option","SkipLink","allHeadings","element","focusTargetRef","disableDefaultBehaviour","SummaryListRow","SummaryListKey","SummaryListValue","SummaryListActions","SummaryList","noBorder","TableSection","TableSection2","TableSectionContext","TableBody","TableCaption","CellOutsideOfSectionWarning","TableCell","_responsive","_responsiveHeading","isNumeric","section","useDevWarning","cellClass","classes","TableContainer","TableHead","TableContext","isTableCell","isValidElement","getHeadingsFromChildren","TableRow","isResponsive","headings","setHeadings","tableCells","index","TablePanel","headingProps","Table$1","prevValue","responsive","captionProps","Table","Tag","color","Textarea","textareaRef","LedeText","BodyText","WarningCalloutLabel","WarningCallout","Clearfix","ReadingWidth"],"mappings":"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"}